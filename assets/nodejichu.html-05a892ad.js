import{_ as t,r as p,o,c,a as s,d as n,b as i,e as a}from"./app-82380d9e.js";const l="/docs/assets/image-20230509222320340-f1e3f636.png",r="/docs/assets/image-20230509224402259-f46e5674.png",u="/docs/assets/image-20230509230114465-1380e992.png",d="/docs/assets/image-20230509230241975-dc98964b.png",k="/docs/assets/image-20230509230333112-35e6ca01.png",m="/docs/assets/image-20230509230537407-33be241d.png",v="/docs/assets/image-20230509230610059-3221f00c.png",g="/docs/assets/image-20230509230752098-324e4c81.png",b="/docs/assets/image-20230509230958607-c30a69a8.png",h="/docs/assets/image-20230509231123342-45155816.png",f="/docs/assets/image-20230509231417496-ca95a69b.png",w="/docs/assets/image-20230509231430731-5b9a437f.png",x="/docs/assets/image-20230509231508043-bfdf1473.png",y="/docs/assets/image-20230509232331762-8f0dfe2e.png",j="/docs/assets/image-20230509234403128-2032b834.png",_="/docs/assets/image-20230509234608152-5976ddd6.png",q="/docs/assets/image-20230509234647055-45d08b0f.png",S="/docs/assets/image-20230509234820302-0591aa63.png",N="/docs/assets/image-20230509235046709-37fb9af1.png",P="/docs/assets/image-20230509235139117-86fe10a0.png",O="/docs/assets/image-20230509235931799-d2cf9aa0.png",C="/docs/assets/image-20230510000304893-2deee120.png",A="/docs/assets/image-20230510000354762-714fda29.png",F="/docs/assets/image-20230510000449043-cddb4ea1.png",J="/docs/assets/image-20230510000559591-6a1c83cd.png",T="/docs/assets/image-20230510000627541-bae2f22b.png",E="/docs/assets/image-20230510001429432-a930647a.png",R="/docs/assets/image-20230510001732296-f1b145a1.png",H="/docs/assets/image-20230510001858461-1186beae.png",I="/docs/assets/image-20230510090045653-f754cbc5.png",M="/docs/assets/image-20230510093024223-8a5cd108.png",B="/docs/assets/image-20230510094403112-b7f21bae.png",D="/docs/assets/image-20230510113335515-dbe887b0.png",U="/docs/assets/image-20230510123214488-0ef5ce82.png",W="/docs/assets/image-20230510214504401-53904b8b.png",L="/docs/assets/image-20230510215147907-6ab2e065.png",V="/docs/assets/image-20230510215220955-505983aa.png",X="/docs/assets/image-20230510221245211-79946cb7.png",G="/docs/assets/image-20230510221254575-e82e1dd2.png",z="/docs/assets/image-20230510222035364-5727281b.png",K="/docs/assets/image-20230510223150927-3594e6c7.png",Q="/docs/assets/image-20230510224050570-a3ed438a.png",Y={},Z=a('<p>[toc]</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>下面是Node官网对Node的介绍：</p><p><img src="'+l+'" alt="image-20230509222320340"></p><p>通过官方文档中对Node的描述可以了解到，node属于JS的运行时环境，或者换句话说，node和浏览器一样，都属于可以运行js脚本代码的宿主环境。</p><p>而Node之所以可以解析运行JavaScript代码，是因为其采用了和Chrome浏览器相同的<strong>V8</strong> JS解析引擎。</p><p>而这一点，对于前端工程师来说，可以让任何一个熟悉JavaScript的前端工程师可以快速的了解和学习Node，从而熟练的开发<strong>服务端</strong>的代码。</p><blockquote><p>下面是<code>gpt3.5</code>中对于Chrome v8引擎的介绍，可以用作参考：</p><p><img src="'+r+'" alt="image-20230509224402259"></p></blockquote><h2 id="node-js-的特点" tabindex="-1"><a class="header-anchor" href="#node-js-的特点" aria-hidden="true">#</a> Node.js 的特点</h2><ol><li>高效：Node.js 使用非阻塞 I/O 和事件驱动模型，非常高效。</li><li>跨平台：Node.js 可以运行在多种操作系统上，如 Windows、Linux、macOS 等。</li><li>丰富的模块：Node.js 内置了大量的模块，还有丰富的第三方模块可供使用。</li></ol><h2 id="node-和-浏览器的区别" tabindex="-1"><a class="header-anchor" href="#node-和-浏览器的区别" aria-hidden="true">#</a> Node 和 浏览器的区别</h2><p>Node.js和浏览器都是JavaScript的运行环境，但它们有一些重要的区别：</p><ol><li>运行环境：Node.js是一种服务器端JavaScript运行环境，而浏览器是一种客户端JavaScript运行环境。Node.js可以在服务器端运行JavaScript代码，而浏览器则在用户的浏览器中运行JavaScript代码。</li><li>API：Node.js和浏览器提供的API不同。Node.js提供了一些服务器端的API，如文件系统API、网络通信API等，而浏览器提供了一些客户端的API，如DOM、BOM等。</li><li>模块系统：Node.js使用CommonJS模块系统，可以方便地引入和导出模块，而浏览器使用ES6模块系统，可以方便地在浏览器中加载和使用模块。</li><li>全局对象：Node.js和浏览器的全局对象不同。Node.js的全局对象是global，而浏览器的全局对象是window。</li><li>调试工具：Node.js和浏览器的调试工具也不同。Node.js使用Node Inspector等调试工具，而浏览器使用浏览器自带的开发者工具。</li></ol><p>总的来说，Node.js和浏览器都是JavaScript的运行环境，但它们的应用场景和API有所不同，开发者需要根据自己的需求选择合适的运行环境。</p><h2 id="node环境配置" tabindex="-1"><a class="header-anchor" href="#node环境配置" aria-hidden="true">#</a> Node环境配置</h2><p>配置Node环境主要有以下两种常见的方式：</p><ul><li>官网直接下载Node安装包</li><li>安装node版本管理工具，通过管理工具安装node</li></ul><blockquote><p>这里考虑到在未来的工作中可能电脑上需要同时具备多个版本的node，所以这里讲解通过nvm这个版本管理工具安装node。</p></blockquote><p>除了通过nvm安装node之外，还需要同时配置npm和安装配置yarn。</p><p>node环境的安装主要是为了在服务端运行js代码，而npm 和 yarn这两款工具则可以帮助我们快速安装一些工具包。</p><p>同时，在安装的过程中，除了上面主要安装的软件以外，还会同时安装一些辅助的工具，比如<code>yrm</code>、<code>nodemon</code>等。</p><h3 id="安装nvm" tabindex="-1"><a class="header-anchor" href="#安装nvm" aria-hidden="true">#</a> 安装nvm</h3><p>可以在<code>github.com</code>中搜索<code>nvm</code>，可以看到如下的内容：</p><p><img src="'+u+'" alt="image-20230509230114465"></p>',24),$={href:"https://github.com/coreybutler/nvm-windows",target:"_blank",rel:"noopener noreferrer"},nn=a('<p><img src="'+d+'" alt="image-20230509230241975"></p><p>在出现的页面中点击下面的选项即可以进行下载：</p><p><img src="'+k+'" alt="image-20230509230333112"></p><p>下载完成后，可以得到如下的安装包：</p><p><img src="'+m+'" alt="image-20230509230537407"></p><p>双击运行安装：</p><p><img src="'+v+'" alt="image-20230509230610059"></p><p>点击next下一步，</p><p><img src="'+g+'" alt="image-20230509230752098"></p><blockquote><p>这里需要注意，nvm的安装位置不建议安装在c盘，同时，也不建议安装在中文的目录以及安装在目录层级过深的位置。</p></blockquote><p>点击next，下一步：</p><p><img src="'+b+'" alt="image-20230509230958607"></p><blockquote><p>这里注意，这一步是设置node的安装目录，和上一步注意相同。这里建议把node安装位置放在和nvm安装目录的同级位置。</p></blockquote><p>点击next下一步：</p><p><img src="'+h+'" alt="image-20230509231123342"></p><p>点击install等待，即可完成安装。</p><blockquote><p>安装完成后点击finish结束即可。</p></blockquote><h3 id="检测nvm是否安装成功" tabindex="-1"><a class="header-anchor" href="#检测nvm是否安装成功" aria-hidden="true">#</a> 检测nvm是否安装成功</h3><p><code>win+r</code> ，在出现的窗口中输入<code>cmd</code>，敲击回车打开终端。</p><p><img src="'+f+'" alt="image-20230509231417496"></p><p><img src="'+w+'" alt="image-20230509231430731"></p><p>在出现的终端中，输入<code>nvm -v</code> ，如果正确的出现了nvm的版本号，则表示安装成功。</p><p><img src="'+x+'" alt="image-20230509231508043"></p><blockquote><p>请注意<code>nvm</code> 和<code>-v</code>之间是有空格的。</p></blockquote><h3 id="设置nvm淘宝镜像源" tabindex="-1"><a class="header-anchor" href="#设置nvm淘宝镜像源" aria-hidden="true">#</a> 设置nvm淘宝镜像源</h3><p>因为nvm服务器在国外，国内下载速度有些慢，所以我们可以通过 <strong>修改镜像源</strong>的方式，来将下载服务器切换到国内的淘宝服务器，变相的提高下载速度。</p><blockquote><p><strong>GPT友情提示：</strong></p><p><img src="'+y+`" alt="image-20230509232331762"></p></blockquote><p>在Windows上，可以通过以下步骤来修改nvm的镜像源：</p><p>1、打开nvm的安装目录，一般在C:\\Users\\你的用户名\\nvm。</p><p>2、打开settings.txt文件，该文件存储了nvm的配置信息。</p><p>3、在settings.txt文件中添加以下内容：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>   node_mirror: https://npm.taobao.org/mirrors/node/
   npm_mirror: https://npm.taobao.org/mirrors/npm/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>4、保存settings.txt文件，关闭编辑器。</p><p>5、重新打开终端，即可使用nvm进行node安装。</p><blockquote><p>使用nvm安装或切换Node.js版本时，nvm会自动从淘宝镜像源下载Node.js安装包。</p></blockquote><h3 id="nvm常用命令" tabindex="-1"><a class="header-anchor" href="#nvm常用命令" aria-hidden="true">#</a> nvm常用命令</h3><blockquote><p>这里建议使用管理员权限打开终端进行操作。</p></blockquote><ul><li>nvm list 查看已安装的node版本</li><li>nvm list available 查看网络可以安装的版本</li><li>nvm install 安装最新版本的node</li><li>nvm install 版本号 安装指定版本号的node</li><li>nvm use 版本号 切换使用指定版本的node</li><li>nvm current 显示当前版本</li><li>nvm uninstall 卸载指定的版本</li><li>nvm version 查看当前nvm版本</li></ul><h3 id="nvm安装node" tabindex="-1"><a class="header-anchor" href="#nvm安装node" aria-hidden="true">#</a> nvm安装node</h3><p>首先，可以通过<code>nvm list available</code> 命令查看网络中可以安装的版本：</p><p><img src="`+j+'" alt="image-20230509234403128"></p><p>我们可以在LTS这一列中选择一个版本进行安装，这里以安装16.14.2为例。</p><p>执行<code>nvm install 16.14.2</code> 命令。</p><p><img src="'+_+'" alt="image-20230509234608152"></p><p>安装完成后，可以执行<code>nvm use 16.14.2</code>命令来使用这个安装的版本：</p><p><img src="'+q+'" alt="image-20230509234647055"></p><p><strong>版本切换完成后，可以通过下面的两条命令来验证node是否安装成功：</strong></p><ul><li><code>node -v</code></li><li><code>npm -v</code></li></ul><blockquote><p>如果单词之间的空格。</p></blockquote><p>如果出现下面的内容就表示安装成功。</p><p><img src="'+S+`" alt="image-20230509234820302"></p><h3 id="yarn-安装" tabindex="-1"><a class="header-anchor" href="#yarn-安装" aria-hidden="true">#</a> yarn 安装</h3><p>可以通过下面的命令来安装yarn:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token function">yarn</span>  <span class="token parameter variable">--registry</span><span class="token operator">=</span>http://registry.npmmirror.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+N+`" alt="image-20230509235046709"></p><p>安装成功后，通过下面的命令来检测是否安装成功：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果出现正确的版本号则安装成功。</p><p><img src="`+P+`" alt="image-20230509235139117"></p><h3 id="yrm的安装和设置" tabindex="-1"><a class="header-anchor" href="#yrm的安装和设置" aria-hidden="true">#</a> yrm的安装和设置</h3><p>可以通过下面的命令来安装<code>yrm</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> yrm  <span class="token parameter variable">--registry</span><span class="token operator">=</span>http://registry.npmmirror.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+O+'" alt="image-20230509235931799"></p><p>安装完成后，我们可以通过下面的命令来操作yrm。</p><p>1、<code>yrm ls</code> 查看可用源</p><p><img src="'+C+'" alt="image-20230510000304893"></p><blockquote><p>前面带有<code>*</code>的表示正在使用的源。</p></blockquote><p>2、<code>yrm test 源名</code> 测试源的速度</p><p><img src="'+A+'" alt="image-20230510000354762"></p><p>3、<code>yrm use 源名</code> 使用源</p><p><img src="'+F+`" alt="image-20230510000449043"></p><h3 id="nodemon安装" tabindex="-1"><a class="header-anchor" href="#nodemon安装" aria-hidden="true">#</a> nodemon安装</h3><p>通过下面的命令安装nodemon:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> nodemon
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+J+'" alt="image-20230510000559591"></p><p>安装完成后可以通过下面的命令查看是否安装成功：</p><p><img src="'+T+`" alt="image-20230510000627541"></p><h2 id="第一个node程序" tabindex="-1"><a class="header-anchor" href="#第一个node程序" aria-hidden="true">#</a> 第一个node程序</h2><p>接下来编写第一个node程序，输出一个<code>hello,world</code>。因为Node同样是以ECMAScript为核心语法，所以我们可以安装JS中的写法，直接<code>console.log</code>输出一个<code>hello,world</code>。</p><p>例如:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello,world&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在当前代码所在的目录打开终端，执行命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> index.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+E+'" alt="image-20230510001429432"></p><p>在node中，想要运行一个js程序，只需要通过node命令 加上文件名 即可。</p><h2 id="node中的全局对象" tabindex="-1"><a class="header-anchor" href="#node中的全局对象" aria-hidden="true">#</a> Node中的全局对象</h2><p>在Node中的全局对象和浏览器中的window不同，Node的全局对象为<code>global</code>。在代码中也可以直接打印global来查看这个node的全局对象。</p><p><img src="'+R+'" alt="image-20230510001732296"></p><p>当js的宿主环境为浏览器时，在代码的全局作用域下，可以通过this来获取window这个全局对象。而在node中，可以通过<code>globalThis</code> 来获取node中的全局对象。</p><p><img src="'+H+`" alt="image-20230510001858461"></p><h2 id="node模块化" tabindex="-1"><a class="header-anchor" href="#node模块化" aria-hidden="true">#</a> Node模块化</h2><p>当js的宿主环境为浏览器时，如果想要在网页中执行一段js程序，往往需要通过<code>script</code>标签来把js脚本文件引入进来，例如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于每个js脚本文件来说，都相当于是处于相同的全局作用域下，那么这个时候就不可避免的出现<strong>变量污染</strong>这种问题。</p><p>而为了解决这种问题，在传统的前端js开发中，很多前端工程师都会使用IIFE这种形式来创建独立的作用域，从而避免变量污染这种情况，例如:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">100</span>
  <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">200</span>
  <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这种模式如果迁移到服务端就显得有些不合时宜了。所以Node在诞生初期，Node的作者就参考了当时社区中较为成熟的<code>CommonJS</code>模块化规范，并且在Node中支持了CommonJS这种规范。</p><h3 id="commonjs规范" tabindex="-1"><a class="header-anchor" href="#commonjs规范" aria-hidden="true">#</a> CommonJS规范</h3><p>在CommonJS规范中，把每个JS文件都定义为是一个<strong>模块</strong>。模块与模块之间作用域相互独立，也就是说，在a模块中定义的变量、函数、对象等内容，在b模块中无法直接访问。这样就有效的避免了程序在运行过程中出现的变量污染等问题。</p><p>如果在编写某个js文件（这个js文件可以被称为模块）的过程中，如果需要其他模块当中的内容，那么就可以使用node提供的<code>require</code>函数来将其<strong>引入</strong>,引入之后就可以在当前模块内使用其他模块导出的内容。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleA.js&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 模块后缀.js可以省略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而如果在编写模块的过程中，想要把模块中的某个属性或者方法<strong>导出</strong>，可以使用exports的形式。</p><p>例如，假设在编写moduleA模块时，封装了一个<code>add()</code>方法，专门用来做两个数值求和的运算，如果想要把这个方法导出，需要使用exports来设置。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token doc-comment comment">/**
 * 计算两个数值的和
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Number<span class="token punctuation">}</span></span> <span class="token parameter">num1</span> 
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Number<span class="token punctuation">}</span></span> <span class="token parameter">num2</span> 
 * <span class="token keyword">@returns</span> Number
 */</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2
<span class="token punctuation">}</span>

<span class="token comment">// 导出操作</span>
exports<span class="token punctuation">.</span>add <span class="token operator">=</span> add 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面代码中，在moduleA.js这个模块中定义了一个add函数，并且通过exports将其导出，那么在其他模块文件中就可以通过<code>require</code>函数来引入这个模块，并且使用引入模块中导出的内容。</p><p>例如，在demo.js文件中通过require引入刚刚编写完的moduleA.js这个模块，并且使用moduleA模块中导出的add函数。</p><p><img src="`+I+'" alt="image-20230510090045653"></p><p><strong>这里需要注意的是，exports在node中代表了一个空白的对象，当通过<code>exports.xxx = xxxx</code>进行设置时，相当于是把要导出的内容挂载到了exports上，这个exports代指的对象就是模块导出的内容。</strong></p><p><strong>而在另外一个模块中，通过require函数引入其他模块时，得到的require函数的返回值就是exports代指的对象，所以如果想要使用其他模块导出的内容，就需要采用<code>.</code>以操作对象的形式调用其他模块导出内容。</strong></p><p><img src="'+M+`" alt="image-20230510093024223"></p><h3 id="自定义模块和内置模块的区别" tabindex="-1"><a class="header-anchor" href="#自定义模块和内置模块的区别" aria-hidden="true">#</a> 自定义模块和内置模块的区别</h3><p>一般来说，可以把自己创建js文件理解为自定义模块，而在Node中，提供了一些内置模块，比如fs、http等。当想要在代码中使用模块时，内置模块和自定义模块的引入是有区别的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 引入内置模块时，直接在require函数中写模块名即可</span>
<span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleA&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 引入自定义模块时，需要在模块名前面加上路径</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="module-exports" tabindex="-1"><a class="header-anchor" href="#module-exports" aria-hidden="true">#</a> module.exports</h3><p>在一个模块中，如果想要直接导出一个对象，那么可以使用<code>module.exports</code> 。如果仅仅是想要导出属性或者方法，那么可以使用<code>exports</code>。</p><p><code>module.exports</code>和<code>exports</code>二者之间的关系如下：</p><ol><li><code>exports</code> 是 <code>module.exports</code> 的一个引用。</li><li>当导出对象时，将修改的是 <code>module.exports</code>，因为 <code>exports</code> 只是一个引用。例如，<code>exports = {}</code> 会改变 <code>exports</code> 所指向的对象，但是只是修改了 <code>exports</code> 引用指向的对象，<code>module.exports</code> 并未被修改，导致最终导出的对象依旧是 <code>{}</code>。</li><li>但是，如果将 <code>exports</code> 赋值为一个新的对象，<code>exports</code> 将会与 <code>module.exports</code> 断开联系。例如，<code>exports = null</code> 或 <code>exports = &#39;hello&#39;</code>会使 <code>exports</code> 不再指向 <code>module.exports</code>。</li></ol><h2 id="内置模块" tabindex="-1"><a class="header-anchor" href="#内置模块" aria-hidden="true">#</a> 内置模块</h2><h3 id="fs模块" tabindex="-1"><a class="header-anchor" href="#fs模块" aria-hidden="true">#</a> fs模块</h3><p>node提供的内置模块fs，主要作用是用来读取和操作文件。当引入了该模块后，就可以得到一个fs对象，在这个对象中会包含fs模块提供的诸多方法。</p><p><img src="`+B+`" alt="image-20230510094403112"></p><p>这其中较为常用的方法如下：</p><ul><li><code>fs.readFile()</code>异步读取文件内容并返回文件内容</li><li><code>fs.writeFile()</code>异步写入文件并且返回undefined</li><li><code>fs.appendFile()</code>异步追加内容到文件并且返回undefined</li><li><code>fs.unlink()</code>异步删除文件并且返回undefined</li><li><code>fs.rename()</code>:异步重命名文件或者目录并且返回undefined</li><li><code>fs.readdir()</code>:异步读取目录并且返回文件列表</li><li><code>fs.mkdir()</code>:异步创建目录并且返回undefined</li><li><code>fs.rmdir()</code>:异步删除目录并且返回undefined</li></ul><h4 id="readfile-读取文件内容" tabindex="-1"><a class="header-anchor" href="#readfile-读取文件内容" aria-hidden="true">#</a> readFile() 读取文件内容</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./article.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="writefile-写入内容" tabindex="-1"><a class="header-anchor" href="#writefile-写入内容" aria-hidden="true">#</a> writeFile() 写入内容</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&#39;./article.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;我是新写入的内容&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;出错啦,&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="appendfile-追加内容" tabindex="-1"><a class="header-anchor" href="#appendfile-追加内容" aria-hidden="true">#</a> appendFile() 追加内容</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">appendFile</span><span class="token punctuation">(</span><span class="token string">&#39;./article.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;我是追加内容&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="案例-记录用户提交信息" tabindex="-1"><a class="header-anchor" href="#案例-记录用户提交信息" aria-hidden="true">#</a> 案例：记录用户提交信息</h4><p>需求：</p><ul><li>用户在执行脚本文件的时候，输入参数<code>-w</code> ，参数的后面可以跟上要记录的日志内容</li><li>把用户输入的内容记录到log文件中，并且把用户记录的内容在终端展示</li><li>用户在执行脚本文件的时候，输入参数<code>-r</code>，可以查看所有的日志记录。</li><li>如果没有包含有效参数，那么直接报错，提示参数错误</li></ul><p><strong>需求分析：</strong></p><p>1、需要获取用户在执行文件时输入的参数，在node中想要实现该需求可以使用<code>process.argv</code>。</p><p>2、将用户输入的内容记录到log文件中，可以使用<code>fs.writeFile()</code>或者<code>fs.appendFile()</code>，但是考虑到日志记录是持久性记录，所以使用<code>fs.appendFile()</code>更合适。</p><p>3、查看用户日志记录，可以使用<code>fs.readFile()</code>读取log日志文件。</p><p>4、抛出可以通过new Error()创建一个错误对象抛出。</p><p>代码:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 获取参数</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">,</span>mode<span class="token punctuation">,</span> text<span class="token punctuation">]</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>argv
<span class="token comment">// console.log(mode, text) </span>

<span class="token keyword">let</span> errorMessage <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// 存储错误信息</span>

<span class="token comment">// 错误处理</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mode <span class="token operator">||</span> <span class="token punctuation">(</span>mode <span class="token operator">!==</span> <span class="token string">&#39;-r&#39;</span> <span class="token operator">&amp;&amp;</span> mode <span class="token operator">!==</span> <span class="token string">&#39;-w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    errorMessage <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
        \\x1B[31m参数错误，可选参数：
            -w 写入日志
            -r 读取日志
        \\x1B[0m
    </span><span class="token template-punctuation string">\`</span></span>

    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span>
<span class="token punctuation">}</span>


<span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">&#39;-w&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>text <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    errorMessage <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
        \\x1B[31m参数缺失：
            请在-w 后添加记录内容
        \\x1B[0m
    </span><span class="token template-punctuation string">\`</span></span>

    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 处理日志存取</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">&#39;-w&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 存储 </span>
    fs<span class="token punctuation">.</span><span class="token function">appendFile</span><span class="token punctuation">(</span><span class="token string">&#39;./log.txt&#39;</span><span class="token punctuation">,</span> text <span class="token operator">+</span> <span class="token string">&#39;\\r\\n&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            errorMessage <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
                \\x1B[33m日志记录失败\\x1B[0m
            </span><span class="token template-punctuation string">\`</span></span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\\x1B[32m日志记录成功\\x1B[0m&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">&#39;-r&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读取日志</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./log.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            errorMessage <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
                \\x1B[33m日志记录读取失败\\x1B[0m
            </span><span class="token template-punctuation string">\`</span></span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在终端中，输出字符串如果需要设置颜色，可以使用特有的转义字符，下面是一些常用颜色对应的字符：</p><p><img src="`+D+`" alt="image-20230510113335515"></p></blockquote><blockquote><p>在每个设置了颜色的字符串的结尾，需要加上<code>\\x1b[0m</code>,表示重置终端颜色，避免影响其他内容。</p></blockquote><h4 id="unlink-删除文件" tabindex="-1"><a class="header-anchor" href="#unlink-删除文件" aria-hidden="true">#</a> unlink() 删除文件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">&#39;./log.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;删除失败：&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;删除成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rename-重命名文件或者目录" tabindex="-1"><a class="header-anchor" href="#rename-重命名文件或者目录" aria-hidden="true">#</a> rename() 重命名文件或者目录</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">&#39;./article.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./article1.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;修改失败&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;修改成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="readdir-读取目录并且返回文件列表" tabindex="-1"><a class="header-anchor" href="#readdir-读取目录并且返回文件列表" aria-hidden="true">#</a> readdir() 读取目录并且返回文件列表</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span><span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mkdir-创建目录" tabindex="-1"><a class="header-anchor" href="#mkdir-创建目录" aria-hidden="true">#</a> mkdir() 创建目录</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">&#39;./src&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;创建成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rmdir-删除目录" tabindex="-1"><a class="header-anchor" href="#rmdir-删除目录" aria-hidden="true">#</a> rmdir() 删除目录</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token string">&#39;./src&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;删除失败&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;删除成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="案例-批量复制文件-修改文件名" tabindex="-1"><a class="header-anchor" href="#案例-批量复制文件-修改文件名" aria-hidden="true">#</a> 案例：批量复制文件&amp;修改文件名</h4><p>需求：</p><p>1、给定目标文件夹和源文件夹</p><p>2、执行脚本后将源文件夹的内容复制到目标文件夹，文件夹内的文件名被修改</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token string">&#39;./demo&#39;</span>
<span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token string">&#39;./demo1&#39;</span>

fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;出错啦&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;创建成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 1. 读取文件列表</span>
fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;读取文件列表出错&#39;</span><span class="token punctuation">)</span>

  <span class="token comment">// 2. 读取文件 </span>
  files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 3. 拼接原文件的地址</span>
    <span class="token keyword">const</span> src <span class="token operator">=</span> __dirname <span class="token operator">+</span> <span class="token string">&#39;/demo/&#39;</span> <span class="token operator">+</span> item
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;出错啦,&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>

      <span class="token comment">// 4. 拼接目标文件路径</span>
      <span class="token keyword">const</span> targetSrc <span class="token operator">=</span> __dirname <span class="token operator">+</span> <span class="token string">&#39;\\\\demo1\\\\&#39;</span> <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;__&#39;</span> <span class="token operator">+</span> item
      fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>targetSrc<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;写入失败&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;写入成功&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="作业" tabindex="-1"><a class="header-anchor" href="#作业" aria-hidden="true">#</a> 作业</h4><p>需求：</p><p>1、用户在执行代码时，可以在终端中设置要复制的文件夹(该文件夹使用绝对路径)和最终复制到的位置（使用绝对路径）</p><p>2、用户在终端中可以指定文件后缀</p><p><img src="`+U+`" alt="image-20230510123214488"></p><h3 id="path模块" tabindex="-1"><a class="header-anchor" href="#path模块" aria-hidden="true">#</a> path模块</h3><p>path模块中提供了大量处理文件路径的方法，常用的包括如下方法：</p><ul><li><code>path.join()</code> 将多个路径拼接成一个路径，并且返回拼接后的路径字符串。</li><li><code>path.resolve()</code>返回相对于当前工作目录的绝对路径。该方法可接受任意数量的路径参数，并依次解析出最终的绝对路径。</li><li><code>path.basename()</code>返回指定路径的文件名。如果指定了第二个参数，则会从文件名中移除该扩展名。</li><li><code>path.dirname()</code>返回指定路径的文件夹路径。</li><li><code>path.extname()</code>返回指定路径的文件扩展名。</li><li><code>path.parse()</code>将指定路径解析为对象形式。包含文件路径、文件夹路径、文件名、扩展名等属性。</li></ul><h4 id="join-方法-将字符串拼接成规范化路径" tabindex="-1"><a class="header-anchor" href="#join-方法-将字符串拼接成规范化路径" aria-hidden="true">#</a> join()方法 将字符串拼接成规范化路径</h4><p><code>path.join([...paths])</code> 方法会将多个路径片段拼接成一个规范化的路径，并返回拼接后的路径。路径片段可以是字符串、对象（通过 <code>toString()</code> 方法转换为字符串）等形式。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> path1 <span class="token operator">=</span> <span class="token string">&#39;/usr/local&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path2 <span class="token operator">=</span> <span class="token string">&#39;bin&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path3 <span class="token operator">=</span> <span class="token string">&#39;node&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span> path2<span class="token punctuation">,</span> path3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;/usr/local/bin/node&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="resolve-方法-将字符串路径构造成绝对路径" tabindex="-1"><a class="header-anchor" href="#resolve-方法-将字符串路径构造成绝对路径" aria-hidden="true">#</a> resolve()方法 将字符串路径构造成绝对路径</h4><p><code>path.resolve([...paths])</code> 方法则会返回一个绝对路径。该方法会将传入的路径序列从右到左进行解析并处理，直到构造出一个绝对路径。换言之，<code>resolve()</code> 方法会将相对路径转换为绝对路径。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> path1 <span class="token operator">=</span> <span class="token string">&#39;/usr/local/bin&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path2 <span class="token operator">=</span> <span class="token string">&#39;../node&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span> path2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;C:\\usr\\local\\node&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="basename-方法-返回指定路径的文件名" tabindex="-1"><a class="header-anchor" href="#basename-方法-返回指定路径的文件名" aria-hidden="true">#</a> basename()方法 返回指定路径的文件名</h4><p>该方法返回指定路径的文件名。如果指定了第二个参数，则会从文件名中移除该扩展名。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token string">&#39;/Users/john/Documents/notes.txt&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> basename1 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;notes.txt&#39;</span>
<span class="token keyword">const</span> basename2 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">&#39;.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;notes&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，<code>path.basename()</code> 方法分别返回了文件的完整文件名和移除扩展名之后的文件名。需要注意的是，如果不传递第二个参数，<code>basename()</code> 方法会返回文件的完整文件名，包括扩展名。</p><h4 id="dirname-方法-返回指定路径的文件夹路径" tabindex="-1"><a class="header-anchor" href="#dirname-方法-返回指定路径的文件夹路径" aria-hidden="true">#</a> dirname() 方法 返回指定路径的文件夹路径</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token string">&#39;/Users/john/Documents/notes.txt&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> dirname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;/Users/john/Documents&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="extname-方法-返回指定路径的文件扩展名" tabindex="-1"><a class="header-anchor" href="#extname-方法-返回指定路径的文件扩展名" aria-hidden="true">#</a> extname()方法 返回指定路径的文件扩展名</h4><p><code>path.extname(path)</code> 方法用于获取指定路径的文件扩展名，返回值是不包括点号的扩展名字符串。比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token string">&#39;/Users/john/Documents/notes.txt&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> extname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;.txt&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，<code>path.extname()</code> 方法返回了指定文件路径的扩展名，即 <code>.txt</code>。</p><p>需要注意的是，如果指定路径没有扩展名，<code>extname()</code> 方法返回的是空字符串。另外，如果指定路径最后一段是以点号开头的，这个点号不会被视为扩展名的一部分，而是当作普通的路径分隔符来处理。比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> filePath1 <span class="token operator">=</span> <span class="token string">&#39;/Users/john/Documents/.gitignore&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> filePath2 <span class="token operator">=</span> <span class="token string">&#39;/Users/john/Documents/notes&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> extname1 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>filePath1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;&#39;</span>
<span class="token keyword">const</span> extname2 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>filePath2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，<code>path.extname()</code> 方法返回的结果分别是空字符串，这是因为对于 <code>.gitignore</code> 和 <code>notes</code> 这两种文件名，它们没有扩展名。</p><h4 id="parse-方法-将指定路径解析为对象形式" tabindex="-1"><a class="header-anchor" href="#parse-方法-将指定路径解析为对象形式" aria-hidden="true">#</a> parse()方法 将指定路径解析为对象形式</h4><p><code>path.parse(path)</code> 方法用于解析指定路径字符串为对象，包含以下属性：</p><ul><li><code>root</code>：路径的根目录，如果没有根目录则为 <code>&quot;&quot;</code>。</li><li><code>dir</code>：路径中除去文件名的部分。</li><li><code>base</code>：路径中的文件名，包括扩展名。如果路径以斜杠结尾，则返回空字符串。</li><li><code>ext</code>：路径中的拓展名（&quot;.&quot; 开头的部分）。</li><li><code>name</code>：路径中的文件名部分，不包括拓展名。如果指定的路径中没有文件名，则返回空字符串。</li></ul><p>比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token string">&#39;/Users/john/Documents/notes.txt&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> parsed <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parsed<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>{
  root: &#39;/&#39;,
  dir: &#39;/Users/john/Documents&#39;,
  base: &#39;notes.txt&#39;,
  ext: &#39;.txt&#39;,
  name: &#39;notes&#39;
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="案例-html代码压缩" tabindex="-1"><a class="header-anchor" href="#案例-html代码压缩" aria-hidden="true">#</a> 案例：html代码压缩</h4><p>需求：执行js文件，将指定位置的html文件进行压缩，去掉回车和换行符。</p><p>需求分析：</p><ul><li>在执行js文件时，会以参数的形式传递位置，可以通过process.argv获取</li><li>使用正则表达式全局匹配回车符\\r换行符\\n</li><li>读取文件使用fs.readFile</li><li>写入新文件使用fs.writeFile</li><li>创建文件夹 fs.mkdir</li><li>使用path.resolve()和path.join()将地址处理成标准地址</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 1. 获取要压缩目录的位置  和 输出的位置</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> target <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>

<span class="token comment">// 2. 将地址变为绝对地址</span>
<span class="token keyword">const</span> urlFullPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
<span class="token keyword">const</span> targetFullPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> target<span class="token punctuation">)</span>


<span class="token comment">// 3. 获取文件夹内文件</span>
fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>urlFullPath<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token comment">// 4. 逐一读取文件内容</span>
  files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将地址拼接</span>
    <span class="token keyword">const</span> sourceFile <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>urlFullPath<span class="token punctuation">,</span> file<span class="token punctuation">)</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 5. 进行正则替换</span>
      <span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\r\\n]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
      <span class="token keyword">const</span> content <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
      <span class="token comment">// 6. 创建新的文件夹</span>
      <span class="token comment">// 将地址加上新的路径</span>
      <span class="token keyword">const</span> newTarget <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>targetFullPath<span class="token punctuation">,</span> file<span class="token punctuation">)</span>
      <span class="token keyword">const</span> stats <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>targetFullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stats<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>targetFullPath<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      
      <span class="token comment">// 7. 将内容写入到新的地址中</span>
      fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>newTarget<span class="token punctuation">,</span> content<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;写入失败&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;写入成功&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="http模块" tabindex="-1"><a class="header-anchor" href="#http模块" aria-hidden="true">#</a> http模块</h3><p>Node.js 中的 <code>http</code> 模块是一个提供 HTTP 服务和客户端功能的核心模块。学习和掌握 <code>http</code> 模块可以帮助开发者搭建自己的 HTTP 服务器，处理 HTTP 请求和响应，从而实现基于 Web 的应用程序。</p><p>其中较为常用的方法如下：</p><ul><li><code>http.createServer()</code> 创建一个web服务</li><li><code>server.listener()</code> 监听端口</li></ul><p>下面是通过http模块创建web服务的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;hello,world&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;server is running ....&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将上面编写好的node代码运行后，可以通过postman或者apifox之类的工具进行请求测试，可以看到如下结果：</p><p><img src="`+W+'" alt="image-20230510214504401"></p><h4 id="解决跨域问题" tabindex="-1"><a class="header-anchor" href="#解决跨域问题" aria-hidden="true">#</a> 解决跨域问题</h4><p>这里为什么不直接通过前端页面请求呢？</p><p>比如下面的网页，点击按钮后就会通过axios向我们刚刚创建好的web server发起一个请求，这个时候就可以在浏览器中看到报错内容：</p><p><img src="'+L+'" alt="image-20230510215147907"></p><p><img src="'+V+`" alt="image-20230510215220955"></p><p>出现这个报错问题的原因是因此此时我们的浏览器端和node的代码创建的web server处于非同源状态，当客户端向web server 发起请求时，就会出现上面这个CORS 跨域错误。</p><p>想要解决这个由非同源引起的CORS跨域错误，可以在服务端当中设置<code>Access-Control-Allow-Origin</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 允许跨域访问</span>
  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;hello,world&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;server is running ....&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中<code> res.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;)</code>设置的<code>*</code>表示任意地址请求web server都允许，如果仅仅想要某个域名可以跨域访问web server，那么setHeader的第二个参数就应该设置允许跨域访问的域名。</p><h4 id="获取客户端请求地址以及请求方法" tabindex="-1"><a class="header-anchor" href="#获取客户端请求地址以及请求方法" aria-hidden="true">#</a> 获取客户端请求地址以及请求方法</h4><p>在 Node.js 中使用 <code>http</code> 模块创建 Web 服务可以通过回调函数中的 <code>req</code> 参数获取客户端的请求信息，包括请求的地址和请求的方法。</p><p>例如：</p><p><img src="`+X+'" alt="image-20230510221245211"></p><p><img src="'+G+'" alt="image-20230510221254575"></p><h4 id="接收客户端get请求参数-query参数" tabindex="-1"><a class="header-anchor" href="#接收客户端get请求参数-query参数" aria-hidden="true">#</a> 接收客户端get请求参数-query参数</h4><p>当客户端请求方式为get，参数传递的方式为querystring格式时，服务端可以采用node内置模块<code>querystring</code>中的<code>parse()</code>方法来进行解析。</p><p>例如：</p><p><img src="'+z+'" alt="image-20230510222035364"></p><h4 id="接收客户端get请求参数-path参数" tabindex="-1"><a class="header-anchor" href="#接收客户端get请求参数-path参数" aria-hidden="true">#</a> 接收客户端get请求参数-path参数</h4><p>当客户端在请求node的web server时，如果采用的请求方式是<code>get</code>，并且传递数据是以<code>path</code>路径形式进行传递，那么在node的服务端，可以通过如下的写法获取：</p><p><img src="'+K+'" alt="image-20230510223150927"></p><h4 id="接收客户端post请求参数-json" tabindex="-1"><a class="header-anchor" href="#接收客户端post请求参数-json" aria-hidden="true">#</a> 接收客户端post请求参数 - json</h4><p>想要获取客户端通过post方式传递过来的json数据，需要在node服务端，监听req对象的<strong>data事件</strong>和<strong>end事件</strong>，监听data事件，可以完整的检测数据传递的过程，而end事件则会在数据传递完毕后触发。</p><p>在数据传递过程中，可以将数据toString()后拼接到一个字符串上，这样在end事件触发后，这个字符串里面存储的就是完整的数据。</p><p><img src="'+Q+`" alt="image-20230510224050570"></p><blockquote><p>node接收其他格式的数据放在框架部分进行说明。</p></blockquote><h4 id="服务端响应数据" tabindex="-1"><a class="header-anchor" href="#服务端响应数据" aria-hidden="true">#</a> 服务端响应数据</h4><p>一般node服务端想要给客户端进行响应，需要通过response对象来进行响应，在响应的过程中，可以通过<code>res.writeHead()</code>设置响应头信息，包括状态码、以及响应数据格式等。可以通过<code>res.write()</code>设置响应的具体数据，可以通过<code>res.end()</code>来结束响应。一般需要注意的是，一定要在最后调用<code>res.end()</code>方法结束响应，否则客户端会一直等待下去。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> url<span class="token punctuation">,</span> method <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/html&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;h1&gt;Hello, World!&lt;/h1&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">&#39;/api&#39;</span> <span class="token operator">&amp;&amp;</span> method <span class="token operator">===</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Received POST request&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;Not Found&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Server is listening on port 3000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="练习-开发登录接口" tabindex="-1"><a class="header-anchor" href="#练习-开发登录接口" aria-hidden="true">#</a> 练习：开发登录接口</h4><h2 id="浏览器的同源策略" tabindex="-1"><a class="header-anchor" href="#浏览器的同源策略" aria-hidden="true">#</a> 浏览器的同源策略</h2><p>同源策略（Same Origin Policy）是一种重要的安全策略，通常存在于 Web 浏览器中。同源策略规定了不同源之间的相互访问权限，即只有在协议、域名和端口号都相同的情况下才能相互访问。</p><p>同源策略可以防止恶意网站窃取数据、cookie 等信息，保护用户数据的安全。例如，如果一个网站可以访问另一个网站的 Cookie，那么用户在这个网站上登录的信息就会被窃取，导致账户被盗。同样的，如果一个网站可以访问另一个网站的用户数据，可能会导致用户数据泄漏，影响用户的隐私。</p><p>需要注意的是，<strong>同源策略只是浏览器端的安全策略，服务器端不受同源策略的限制</strong>。因此，如果需要在不同源之间进行数据交互，可以通过跨域资源共享（CORS）、代理等方式来解决。</p><p>同时，也可以在 HTTP 响应头中设置一些安全性策略，如设置 <code>X-Frame-Options</code> 来防止网站被嵌入到其他网站中，设置 <code>X-XSS-Protection</code> 来防止 XSS 攻击等，提高网站的安全性。</p><h2 id="跨域解决方案" tabindex="-1"><a class="header-anchor" href="#跨域解决方案" aria-hidden="true">#</a> 跨域解决方案</h2><p>跨域问题（Cross-Origin）是由于浏览器的同源策略导致的。一般情况下同源策略会限制同域名、协议、端口的访问，而跨域则是指请求的数据与当前网页不在同一个域名、协议或端口号下。在这种情况下，浏览器会禁止客户端的跨域请求。</p><p>常见的解决跨域数据请求问题的方式，包括：</p><ol><li>JSONP（JSON with Padding）方式</li></ol><p>使用 JSONP 可以前端直接请求跨域的后端 API 接口，JSONP 通过在页面上动态插入 script 标签，利用 script 标签可以从其他域名下加载 JavaScript 脚本的特性实现。不过这种方式对后端的接口也需要做出一些特定的兼容，可能会存在安全问题。</p><ol start="2"><li>CORS（Cross-Origin Resource Sharing）方式</li></ol><p>CORS 方式是允许一些未经同意的跨域请求，通过服务器设置相关响应头，进行跨域资源共享，前端可以发送 XMLHttpRequest 请求。</p><ol start="3"><li>代理方式</li></ol><p>代理是指通过服务器端来进行数据的请求，前端请求本地服务器的 API 时，由本地服务器再去请求真正提供数据的服务器，最后再将数据返回前端。</p><p>目前绝大多数情况下，CORS 是最先进也是最普遍的解决方案之一，但是如果是前端与后端系统架构分离的情况下，代理方式也是一种实用的方案。</p><h3 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> JSONP</h3><p>首先需要明确的是，JSONP 是一种前端与后端进行数据交互的方式，其实现方式实际上是通过动态创建 script 标签来实现的。</p><p>具体而言，JSONP 可以通过在前端代码中创建一个 <code>&lt;script&gt;</code> 标签，将包含 JSON 数据的 url 传进去，后台需要将该 Json 数据用一个函数的形式返回。举个例子来说：</p><p>假设在前端我们有如下代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;http://api.example.com/data.json?callback=handleResponse&#39;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么在调用 <code>http://api.example.com/data.json</code> 的时候，服务端会返回类似以下的数据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">handleResponse</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">20</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从而前端代码通过 <code>handleResponse</code> 函数将数据进行处理。需要注意的是，这里的数据必须是 JSON 数据，且返回的函数名必须与前端设置的 <code>callback</code> 参数一致。</p><p>需要注意的是，JSONP 可能存在一些安全问题，这是因为 JSONP 的原理是动态添加 script 标签，而 script 标签的 src 属性是不受同源策略的限制的，在懵懵懂懂的前端（攻击者）动态插入 script 标签时，有可能直接把原网站的 Cookie 等敏感信息传递到黑客的服务器上去。因此，在使用 JSONP 的时候，要记得对返回值进行前端的安全打包。</p><h3 id="cors" tabindex="-1"><a class="header-anchor" href="#cors" aria-hidden="true">#</a> CORS</h3><p>CORS（Cross-Origin Resource Sharing）是一种浏览器机制，其通过普通的 HTTP 请求和响应头来允许浏览器与服务器进行跨源通信。CORS 允许在访问一个资源之前，应该首先向服务器发送一个请求来检查服务器是否为来自 Origin 的请求提供了访问权限。如果请求被允许，服务器将返回一个 <code>Access-Control-Allow-Origin</code> 响应头，这个响应头表示该资源允许哪些 Origin 来进行访问。如果请求不被允许，则服务端需要返回一个 401 或 400 状态码。</p><p>具体而言，CORS 通常需要在后端的响应头上设置以下一些参数：</p><ol><li><code>Access-Control-Allow-Origin</code>：表示允许访问的源地址，通常可以设置为 <code>*</code> 或者具体的地址。</li><li><code>Access-Control-Allow-Methods</code>：表示允许访问的 HTTP 方法，可以将 <code>GET、POST、PUT</code> 等进行设置。</li><li><code>Access-Control-Allow-Headers</code>：表示允许访问的自定义头部，通常比较少用到。</li><li><code>Access-Control-Allow-Credentials</code>：表示允许携带 Cookie，通常需要设置为 <code>true</code>。</li><li><code>Access-Control-Max-Age</code>：表示允许访问的有效期，单位为秒。</li></ol><h3 id="代理服务" tabindex="-1"><a class="header-anchor" href="#代理服务" aria-hidden="true">#</a> 代理服务</h3><p>使用代理方式进行跨域请求可以说是一个比较常见的解决方案，主要思路就是通过在当前域名下设置一个代理服务器，将请求转发到目标服务器上去，从而避免了浏览器的同源策略。常见的代理方式有以下几种：</p><ol><li>调用后端接口：可以在前端的请求中将需要跨域请求的资源路径发送到后端，由后端转发请求到目标服务器上去。这种方式的好处是比较直接，可以利用后端的代理服务器绕开跨域问题，不过需要修改后端代码，在传递请求参数时也需要做一些调整。</li><li>使用 CORS-anywhere：CORS-anywhere 是一个开源的反向代理服务器，其作用是在服务器端把跨域请求重新封装成同域请求，然后发送给目标服务器，在返回结果之前在响应头上增加一些 CORS 相关的设置。这种方式对于前端人员来说比较方便，也不需要修改后端代码，但是由于需要使用第三方代理服务器，因此响应速度可能会比较慢，也不能保证其稳定性。</li><li>在前端使用自定义代理：这种方式比较灵活，可以根据自己的需求设定代理服务器的地址和具体的请求参数等，但需要编写额外的代理代码。通常可以在前端代码中编写一个自己的跨域请求代理，将需要跨域的请求发送给代理服务器，然后由代理服务器将请求转发到目标服务器上去，最后将响应结果返回给前端。</li></ol><p>需要注意的是，代理方式虽然可以解决跨域问题，但也会带来一些额外的安全风险，因此需要在使用代理时做好安全控制。在一些对安全性要求比较高的场合，比如支付等业务中，建议避免使用代理方式进行跨域请求。</p>`,266);function sn(an,en){const e=p("ExternalLinkIcon");return o(),c("div",null,[Z,s("p",null,[n("也可以直接点击[这里]("),s("a",$,[n("GitHub - coreybutler/nvm-windows: A node.js version management utility for Windows. Ironically written in Go."),i(e)]),n(")访问。")]),nn])}const pn=t(Y,[["render",sn],["__file","nodejichu.html.vue"]]);export{pn as default};
