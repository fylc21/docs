import{_ as t,r as o,o as c,c as l,a as n,d as s,b as p,e as a}from"./app-82380d9e.js";const i="/docs/assets/image-20230516224211554-812e2b63.png",u="/docs/assets/image-20230516162524048-7480c753.png",r="/docs/assets/image-20230516162541995-297918ef.png",d="/docs/assets/image-20230516162554637-e3df55d0.png",k="/docs/assets/image-20230516162703098-162a035b.png",m="/docs/assets/image-20230516162718569-2f21aa76.png",v="/docs/assets/image-20230516162831480-e756aa46.png",g="/docs/assets/image-20230516163655084-54745326.png",b="/docs/assets/image-20230516163738769-30a83001.png",y="/docs/assets/image-20230516163826099-13f41f4d.png",h="/docs/assets/image-20230516163854609-d5158d51.png",q="/docs/assets/image-20230516163949463-b7b6a400.png",w="/docs/assets/image-20230516164016997-c2b6f34c.png",_="/docs/assets/image-20230516164043684-81389d81.png",f="/docs/assets/image-20230516164110607-7f7824cd.png",x="/docs/assets/image-20230516164134995-fe6681a0.png",S="/docs/assets/image-20230516164149132-8df4f187.png",L="/docs/assets/image-20230516164205040-b1873785.png",M="/docs/assets/image-20230516164249333-3d221b5a.png",E="/docs/assets/image-20230516164331901-08a97103.png",T="/docs/assets/image-20230516164412393-919af0a5.png",Q="/docs/assets/image-20230516164426695-6d966a88.png",R="/docs/assets/image-20230516165007940-950d126e.png",N="/docs/assets/image-20230516165034378-17e952f8.png",j="/docs/assets/image-20230516165150611-1ca70936.png",A="/docs/assets/image-20230516170147291-b774a891.png",I="/docs/assets/image-20230516170211477-55d73218.png",C="/docs/assets/image-20230516170223512-01d331a3.png",U="/docs/assets/image-20230516170333346-563446f4.png",D="/docs/assets/image-20230516170347838-fea4905e.png",O="/docs/assets/image-20230516170359631-171fcb83.png",P="/docs/assets/image-20230516170410409-78a046de.png",B="/docs/assets/image-20230516170500548-a5ba45c3.png",F="/docs/assets/image-20230516170523350-ba0c5dbd.png",J="/docs/assets/image-20230516170539980-6d2b9f2f.png",K="/docs/assets/image-20230516170713325-c0d053e8.png",G="/docs/assets/image-20230516170726759-016517cc.png",H="/docs/assets/image-20230516170835101-46f0e1eb.png",V="/docs/assets/image-20230516170853054-7dfd1f2c.png",W="/docs/assets/image-20230516170929853-6769f686.png",Y="/docs/assets/image-20230516175122532-6edf3c95.png",z="/docs/assets/image-20230516195217049-e7ac9521.png",X={},Z=a(`<h2 id="mockjs" tabindex="-1"><a class="header-anchor" href="#mockjs" aria-hidden="true">#</a> MockJS</h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h3><p><code>MockJS</code>是一款非常好用的前端模拟数据生成工具，它可以帮助我们快速生成符合实际需求的随机数据，用于前端开发过程中测试、模拟接口数据等场景。</p><p>使用MockJS可以大大提高我们开发的效率，避免了手动撰写测试数据的繁琐操作，同时也能确保数据的真实性和随机性。MockJS支持生成各种数据类型，如数字、布尔值、字符串、数组、对象、日期、正则表达式等，并且还提供了多种数据模板用于更好地控制数据的生成过程。</p><p>除此之外，MockJS还支持模拟网络延迟，从而更加真实地模拟实际场景下的接口情况。同时，MockJS还集成于Webpack / Grunt / Gulp等构建工具中，方便我们在开发过程中使用。</p><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h3><p>可以通过下面的命令来安装MockJS。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> mockjs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><p>使用MockJS非常简单，只需引入MockJS库文件，根据数据需求编写模板，调用<code>Mock.mock()</code>方法即可生成符合模板的随机数据。以下是一个MockJS示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引入MockJS</span>
<span class="token keyword">const</span> Mock <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mockjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 配置数据模板</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;list|1-10&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;id|+1&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@cname&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;age|18-60&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;gender|1&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;男&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;女&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@EMAIL&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;phone|1&quot;</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1[385][1-9]\\d{8}</span><span class="token regex-delimiter">/</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 打印生成的数据</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;koa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mysql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;koa-router&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Mock <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mockjs&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> Random <span class="token operator">=</span> Mock<span class="token punctuation">.</span>Random<span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/test&#39;</span><span class="token punctuation">,</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">errno</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;数据请求成功&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    <span class="token literal-property property">id</span><span class="token operator">:</span> Random<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">name</span><span class="token operator">:</span> Random<span class="token punctuation">.</span><span class="token function">cname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">email</span><span class="token operator">:</span> Random<span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">addr</span><span class="token operator">:</span> Random<span class="token punctuation">.</span><span class="token function">county</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> temp
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;server is running ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>响应结果如下：</p><p><img src="`+i+'" alt="image-20230516224211554"></p>',15),$={href:"http://mockjs.com/examples.html",target:"_blank",rel:"noopener noreferrer"},nn=a('<h2 id="mysql-基础" tabindex="-1"><a class="header-anchor" href="#mysql-基础" aria-hidden="true">#</a> MySQL 基础</h2><h3 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1" aria-hidden="true">#</a> 介绍</h3><p>MySQL是一种关系型数据库管理系统(RDBMS)，由瑞典公司 MySQL AB 开发。MySQL是开源软件，遵循GPL（GNU General Public License)协议。MySQL是最流行的开源数据库之一，被广泛应用在 Web 应用开发、数据仓库、电子商务等领域。</p><p>MySQL拥有以下特点：</p><ol><li>可扩展：MySQL可在多个平台下运行，并支持多种编程语言和 API。</li><li>可靠性：MySQL具有高度的稳定性和可靠性，并支持事务处理。</li><li>性能：MySQL具有高性能和可伸缩性，可支持高负载的应用程序。</li><li>安全性：MySQL提供了广泛的安全控制，包括密码加密、访问控制等。</li><li>免费开源：MySQL完全开放源代码，使用者可以任意修改和使用。</li></ol><p>MySQL被广泛应用于 Web 应用开发，是许多流行的网站和应用程序的关键组成部分，例如Facebook、Twitter、YouTube、Tumblr、Flickr、WordPress等。</p><h3 id="mysql安装" tabindex="-1"><a class="header-anchor" href="#mysql安装" aria-hidden="true">#</a> MySQL安装</h3><blockquote><p>这里对于MySQL的学习，下载MySQL社区版即可。</p></blockquote><p>bing搜索mysql,在出现的mysql官网选项中选择下载。通过下面的步骤下载mysql。</p><p><img src="'+u+'" alt="image-20230516162524048"></p><p><img src="'+r+'" alt="image-20230516162541995"></p><p><img src="'+d+'" alt="image-20230516162554637"></p><p><img src="'+k+'" alt="image-20230516162703098"></p><p><img src="'+m+'" alt="image-20230516162718569"></p><p>点击之后，就会下载mysql安装包。</p><p>安装包下载好后，双击安装包进行安装。</p><p><img src="'+v+'" alt="image-20230516162831480"></p><p>在出现的界面中选择<code>Server only</code>，点击<code>next</code>。</p><p><img src="'+g+'" alt="image-20230516163655084"></p><p>点击next后在出现的界面中点击<code>Execute</code>,进行安装。</p><p><img src="'+b+'" alt="image-20230516163738769"></p><p>安装完成后点击next。</p><p><img src="'+y+'" alt="image-20230516163826099"></p><p>再出现的界面中点击<code>Next</code>。</p><p><img src="'+h+'" alt="image-20230516163854609"></p><p><img src="'+q+'" alt="image-20230516163949463"></p><p><img src="'+w+'" alt="image-20230516164016997"></p><p><img src="'+_+'" alt="image-20230516164043684"></p><p><img src="'+f+'" alt="image-20230516164110607"></p><p><img src="'+x+'" alt="image-20230516164134995"></p><p><img src="'+S+'" alt="image-20230516164149132"></p><p><img src="'+L+'" alt="image-20230516164205040"></p><p>点击<code>Execute</code>,进行安装。</p><p><img src="'+M+'" alt="image-20230516164249333"></p><p>安装完成后点击finish。</p><p><img src="'+E+'" alt="image-20230516164331901"></p><p><img src="'+T+'" alt="image-20230516164412393"></p><p><img src="'+Q+'" alt="image-20230516164426695"></p><p>安装完成后，找到<code>MySQL8.0 Command Line Client</code>，点击运行。</p><p><img src="'+R+'" alt="image-20230516165007940"></p><p>在出现的界面中，输入密码，进入到数据库。</p><p><img src="'+N+'" alt="image-20230516165034378"></p><p>进入到下面这个界面，表示数据库安装成功。</p><p><img src="'+j+'" alt="image-20230516165150611"></p><h3 id="安装navicat" tabindex="-1"><a class="header-anchor" href="#安装navicat" aria-hidden="true">#</a> 安装navicat</h3><p>解压安装包，双击下面这个文件进行安装：</p><p><img src="'+A+'" alt="image-20230516170147291"></p><p>点击下一步：</p><p><img src="'+I+'" alt="image-20230516170211477"></p><p><img src="'+C+'" alt="image-20230516170223512"></p><p>设置安装路径，不要装在c盘。设置好安装路径之后，点击下一步：</p><p><img src="'+U+'" alt="image-20230516170333346"></p><p>点击下一步：</p><p><img src="'+D+'" alt="image-20230516170347838"></p><p><img src="'+O+'" alt="image-20230516170359631"></p><p><img src="'+P+'" alt="image-20230516170410409"></p><p>点击完成按钮。<strong>切记，安装完成后不要运行navicat,继续下面的操作。</strong></p><p><img src="'+B+'" alt="image-20230516170500548"></p><p>双击下面的这个文件：</p><p><img src="'+F+'" alt="image-20230516170523350"></p><p>点击确定。</p><p><img src="'+J+'" alt="image-20230516170539980"></p><h3 id="navicat链接mysql" tabindex="-1"><a class="header-anchor" href="#navicat链接mysql" aria-hidden="true">#</a> navicat链接mysql</h3><p>安装完成后运行navicat。</p><blockquote><p><strong>注意，在出现的更新界面，不要点击更新，把检查更新选项关闭。</strong></p></blockquote><p>点击链接。</p><p><img src="'+K+'" alt="image-20230516170713325"></p><p>选择MySQL。</p><p><img src="'+G+'" alt="image-20230516170726759"></p><p>在出现的界面中输入数据库本地的地址，以及密码。点击链接测试。</p><p><img src="'+H+'" alt="image-20230516170835101"></p><p>出现连接成功的提示后，点击确定。</p><p><img src="'+V+'" alt="image-20230516170853054"></p><p>双击图标，灰色变成绿色后，就可以看到本地mysql数据库中的内容。</p><p><img src="'+W+'" alt="image-20230516170929853"></p><p>可以在ip地址上右键选择<code>命令列界面</code>,在出现的界面中可以执行命令：</p><p><img src="'+Y+`" alt="image-20230516175122532"></p><h3 id="sql基础" tabindex="-1"><a class="header-anchor" href="#sql基础" aria-hidden="true">#</a> SQL基础</h3><h4 id="sql与mysql基础" tabindex="-1"><a class="header-anchor" href="#sql与mysql基础" aria-hidden="true">#</a> SQL与MySQL基础</h4><p>SQL（Structured Query Language）是一种标准的关系型数据库管理系统（RDBMS）语言，定义了数据的结构、管理和操作。而MySQL是一个RDBMS，可以使用SQL来管理和操作数据。</p><p>简而言之，SQL是一种语言，而MySQL是一个使用这种语言的关系型数据库管理系统。当我们对MySQL进行数据操作的时候，比如插入、查询、删除、修改等，我们会用到SQL语句来完成这些操作。因此，MySQL可以被视为SQL的一种实现，而SQL被广泛应用在各种关系型数据库管理系统中，MySQL只是其中之一。</p><h4 id="名词解释" tabindex="-1"><a class="header-anchor" href="#名词解释" aria-hidden="true">#</a> 名词解释</h4><ul><li>数据库 <ul><li>数据库是一些关联表的集合。</li></ul></li><li>数据表 <ul><li>表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</li></ul></li><li>列 <ul><li>一列(数据元素) 包含了相同类型的数据, 例如邮政编码的数据。</li></ul></li><li>行 <ul><li>一行（元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li></ul></li><li>主键 <ul><li>主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li></ul></li></ul><h4 id="sql操作-数据库操作" tabindex="-1"><a class="header-anchor" href="#sql操作-数据库操作" aria-hidden="true">#</a> SQL操作-数据库操作</h4><h5 id="_1、创建数据库" tabindex="-1"><a class="header-anchor" href="#_1、创建数据库" aria-hidden="true">#</a> <strong>1、创建数据库</strong></h5><p>创建数据库的语法如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>create database 数据库名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>数据库名不能是中文。</p></blockquote><p>例如，创建一个数据库叫<code>demo</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>create database demo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2、查看所有的数据库" tabindex="-1"><a class="header-anchor" href="#_2、查看所有的数据库" aria-hidden="true">#</a> 2、查看所有的数据库</h5><p>可以通过下面的命令查看所有的数据库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>show databases<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3、删除数据库" tabindex="-1"><a class="header-anchor" href="#_3、删除数据库" aria-hidden="true">#</a> 3、删除数据库</h5><p>通过下面的命令删除数据库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>drop database 数据库名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，删除刚刚创建的demo数据库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>drop database demo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_4、选择使用数据库" tabindex="-1"><a class="header-anchor" href="#_4、选择使用数据库" aria-hidden="true">#</a> 4、选择使用数据库</h5><p>在操作数据库中的数据表之前，需要先选择使用数据库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>use 数据库名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如使用demo数据库:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>use demo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="sql操作-数据表操作" tabindex="-1"><a class="header-anchor" href="#sql操作-数据表操作" aria-hidden="true">#</a> SQL操作-数据表操作</h3><p>想要创建一个数据表，需要具备以下信息：</p><ul><li>表名</li><li>表字段名</li><li>表字段类型</li></ul><p><strong>其中，表名和表字段名应该和具体业务相关。</strong></p><p><strong>表字段类型应该根据存储的数据来定。</strong></p>`,108),sn={href:"https://www.runoob.com/mysql/mysql-data-types.html",target:"_blank",rel:"noopener noreferrer"},an=a('<h4 id="_1、创建数据表" tabindex="-1"><a class="header-anchor" href="#_1、创建数据表" aria-hidden="true">#</a> 1、创建数据表</h4><p>创建数据表的语法如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>CREATE TABLE table_name <span class="token punctuation">(</span>column_name column_type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以参考下面的语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>表名<span class="token punctuation">`</span></span><span class="token punctuation">(</span>\n   <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">INT</span> <span class="token keyword">UNSIGNED</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n   <span class="token identifier"><span class="token punctuation">`</span>title<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n   <span class="token identifier"><span class="token punctuation">`</span>author<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n   <span class="token identifier"><span class="token punctuation">`</span>submission_date<span class="token punctuation">`</span></span> <span class="token keyword">DATE</span><span class="token punctuation">,</span>\n   <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span> <span class="token identifier"><span class="token punctuation">`</span>runoob_id<span class="token punctuation">`</span></span> <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果你不想字段为 <strong>NULL</strong> 可以设置字段的属性为 <strong>NOT NULL</strong>， 在操作数据库时如果输入该字段的数据为<strong>NULL</strong> ，就会报错。</li><li>AUTO_INCREMENT定义列为自增的属性，一般用于主键，数值会自动加1。</li><li>PRIMARY KEY关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。</li><li>ENGINE 设置存储引擎，CHARSET 设置编码。</li></ul><p>下面是创建一个学生信息表的SQL:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建一个学生信息表</span>\n<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n    <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">unsigned</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>email<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&#39;example@gmail.com&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>stu_num<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>address<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&#39;北京&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>update_time<span class="token punctuation">`</span></span> <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span>\n<span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是对上面sql语句中一些关键词的说明：</p><ul><li><p><code>if not exists</code> 如果<code>student</code>表存在则不创建。</p></li><li><p><code>int</code> 数字类型，<code>unsigned</code>非负整数，<code>primary key</code>主键(作用是唯一)，<code>auto_increment</code>自增。</p></li><li><p><code>not null</code>非空。</p></li><li><p><code>default</code> 默认值。</p></li><li><p><code>timestamp</code>时间戳。如果在插入数据的时候，没有传入该字段会默认为当前时间戳。</p></li></ul><h4 id="_2、查看数据表结构" tabindex="-1"><a class="header-anchor" href="#_2、查看数据表结构" aria-hidden="true">#</a> 2、查看数据表结构</h4><p>可以通过下面的命令查看数据表结构：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">desc</span> 表名<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3、修改表结构" tabindex="-1"><a class="header-anchor" href="#_3、修改表结构" aria-hidden="true">#</a> 3、修改表结构</h4><p>下面列出的是修改现有表结构的示例：</p><p><strong>3.1 给现有表添加一个新的列：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span> <span class="token keyword">add</span> <span class="token keyword">column</span> <span class="token identifier"><span class="token punctuation">`</span>info<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>3.2 修改一个现有列：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span> <span class="token keyword">modify</span> <span class="token keyword">column</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>3.3 删除一个现有列：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span> <span class="token keyword">drop</span> <span class="token keyword">column</span> <span class="token identifier"><span class="token punctuation">`</span>info<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4、查看当前数据库中所有表" tabindex="-1"><a class="header-anchor" href="#_4、查看当前数据库中所有表" aria-hidden="true">#</a> 4、查看当前数据库中所有表</h4><p>通过下面的命令可以查看当前数据库中所有表：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5、对表数据的增删改查" tabindex="-1"><a class="header-anchor" href="#_5、对表数据的增删改查" aria-hidden="true">#</a> 5、对表数据的增删改查</h4><p><strong>5.1 向数据表中插入数据</strong></p><p>向数据表中插入数据可以通过下面的语法插入：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名 <span class="token punctuation">(</span>字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span><span class="token punctuation">,</span> 字段<span class="token number">3</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> valu2<span class="token punctuation">,</span> value2 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如，向刚才创建的student表中插入数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> email<span class="token punctuation">,</span> stu_num\n<span class="token punctuation">,</span> address<span class="token punctuation">,</span> update_time<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&quot;admin@qq.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;30030301010&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;上海浦东&quot;</span><span class="token punctuation">,</span> <span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5.2、删除数据表中数据</strong></p><p>如果想要删除表中数据，可以通过下面的sql语句删除：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token punctuation">[</span><span class="token keyword">where</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>where 后面跟的是删除数据的条件，如果没有这个条件，则数据表中所有的记录都会被删除。</p></blockquote><p>在设置where条件的时候，可以通过下面的操作符来进行条件的设置。</p><p><img src="'+z+`" alt="image-20230516195217049"></p><p><strong>5.3、修改数据表中的某条数据</strong></p><p>如果想要修改数据表中的某条数据，可以通过下面的sql语句来执行：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> table_name <span class="token keyword">SET</span> field1<span class="token operator">=</span>new<span class="token operator">-</span>value1<span class="token punctuation">,</span> field2<span class="token operator">=</span>new<span class="token operator">-</span>value2
<span class="token punctuation">[</span><span class="token keyword">WHERE</span> Clause<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>比如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> student <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token string">&quot;root@qq.com&quot;</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>5.4、查询某个数据表中的数据</strong></p><p>如果想要查询某个数据表中的数据，可以通过下面的sql语法来执行：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">,</span>column_name
<span class="token keyword">FROM</span> table_name
<span class="token punctuation">[</span><span class="token keyword">WHERE</span> Clause<span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token keyword">LIMIT</span> N<span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token keyword">OFFSET</span> M<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以使用 LIMIT 属性来设定返回的记录数。</li><li>可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。</li></ul><p>如果想要查询数据表中的全部数据，可以通过下面的sql:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果想要查询数据表中id小于100的所有的数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果想要查询数据表中id&lt;100的数据中的name和email字段：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name<span class="token punctuation">,</span> email <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6、删除数据表" tabindex="-1"><a class="header-anchor" href="#_6、删除数据表" aria-hidden="true">#</a> 6、删除数据表</h4><p>可以通过下面的sql命令来删除数据表：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">table</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_7、模糊查询" tabindex="-1"><a class="header-anchor" href="#_7、模糊查询" aria-hidden="true">#</a> 7、模糊查询</h4><p>可以通过like子句通过%来进行模糊查询，例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;%roo&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的sql语句查询的是name中包含roo并且是以roo结尾的数据字段。</p><h2 id="koa操作mysql" tabindex="-1"><a class="header-anchor" href="#koa操作mysql" aria-hidden="true">#</a> Koa操作MySQL</h2><p>在koa应用程序中，可以使用Node.js中提供的<strong>mysql包</strong>来操作MySQL数据库。这个包可以连接到MySQL服务器，并执行SQL语句来查询、插入、更新和删除数据。</p><h3 id="安装mysql包" tabindex="-1"><a class="header-anchor" href="#安装mysql包" aria-hidden="true">#</a> 安装mysql包</h3><p>可以通过下面的命令来安装mysql：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="koa搭建服务" tabindex="-1"><a class="header-anchor" href="#koa搭建服务" aria-hidden="true">#</a> Koa搭建服务</h3><p>在测试koa连接mysql之前，先把web server的服务搭建起来：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;koa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mysql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;koa-router&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// code ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;server is running ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mysql包的使用" tabindex="-1"><a class="header-anchor" href="#mysql包的使用" aria-hidden="true">#</a> mysql包的使用</h3><p>在koa中使用mysql包，首先需要在引入mysql包之后，创建链接。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;数据库的地址&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;数据库的用户名&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;数据库密码&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;要操作的数据库&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>连接创建成功后，可以通过<code>connection</code>调用<code>query</code>方法，在<code>query()</code>方法中第一个参数可以传入sql语句，第二个参数则是一个callback，callback中可以接收两个参数，第一个参数为错误对象，第二个参数为响应结果，如果是查询操作，第二个参数为数组，否则其他操作为对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> rows</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是一段可以参考的示例代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;koa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mysql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;koa-router&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 连接到MySQL数据库</span>
<span class="token keyword">const</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&quot;abc123&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&quot;demo&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">query</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">sql</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> rows</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token function">resolve</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;select * from student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// console.log(res);</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">errno</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;数据请求成功&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> res
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">errno</span><span class="token operator">:</span> <span class="token number">400001</span><span class="token punctuation">,</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;数据请求失败&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;server is running ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码执行后，当客户端请求接口<code>http://127.0.0.1:3000/</code>时，就会得到来自于服务端的数据响应，其中就包含从数据库抽取的数据。</p><blockquote><p><strong>如果您的应用程序需要使用数据库，请考虑使用ORM库，如Sequelize或TypeORM，以便更轻松地管理数据库操作。</strong></p></blockquote><blockquote><p>这里使用mysql包链接数据库，仅仅是为了学习使用。</p></blockquote>`,76);function en(pn,tn){const e=o("ExternalLinkIcon");return c(),l("div",null,[Z,n("blockquote",null,[n("p",null,[s("更多使用细节可以访问"),n("a",$,[s("这里"),p(e)]),s("查看。")])]),nn,n("blockquote",null,[n("p",null,[s("关于数据表字段类型可以点击"),n("a",sn,[s("这里"),p(e)]),s("查看参考。")])]),an])}const cn=t(X,[["render",en],["__file","koakuangjiayingyong.html.vue"]]);export{cn as default};
