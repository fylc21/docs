import{_ as e,o as a,c as n,e as s}from"./app-82380d9e.js";const d="/docs/assets/image-20230513111333636-26e4e90a.png",c="/docs/assets/image-20230513111704180-17ba25eb.png",o="/docs/assets/image-20230513112718696-645ac2f4.png",i="/docs/assets/image-20230513113817801-c9fd3a7f.png",p="/docs/assets/image-20230513114918326-7170e9c6.png",r="/docs/assets/image-20230513123642068-f2986027.png",t="/docs/assets/image-20230513165625184-5fe04f3d.png",l="/docs/assets/image-20230513165710635-61aa5d0b.png",h="/docs/assets/image-20230513165812685-6d1eccdb.png",m={},u=s(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>npm 和 yarn 都是Node中常用的包管理工具，用于管理Node应用所需的依赖包。</p><h2 id="npm安装包" tabindex="-1"><a class="header-anchor" href="#npm安装包" aria-hidden="true">#</a> npm安装包</h2><p>通过npm安装第三方的工具包，可以分成两种模式：</p><ul><li>全局模式</li><li>局部模式</li></ul><h3 id="全局模式" tabindex="-1"><a class="header-anchor" href="#全局模式" aria-hidden="true">#</a> 全局模式</h3><p>全局模式指的是将第三方的工具包以全局模式安装，安装完成后可以在系统任何位置通过终端使用第三方工具。</p><p>安装命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> 包名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当通过<code>-g</code>命令安装包后，这个包就是一个安装在全局作用域下的包，可以在任何位置打开终端，通过终端直接使用这个包。</p><p>当通过<code>-g</code>命令安装包后，第三方的包会被安装到node安装目录下的<code>node_modules</code>文件夹。</p><p>比如通过命令<code>npm install -g nodemon</code>，那么安装的这个包我们就可以直接在node安装目录中的node_modules文件夹内。</p><p><img src="`+d+'" alt="image-20230513111333636"></p><p><img src="'+c+'" alt="image-20230513111704180"></p><h3 id="局部模式" tabindex="-1"><a class="header-anchor" href="#局部模式" aria-hidden="true">#</a> 局部模式</h3><p>全局模式相对来说，除了安装一些通用性的工具以外，很少会在把一个包采用全局模式安装。大多数的时候，都会采用局部模式来安装包。</p><h4 id="package-json" tabindex="-1"><a class="header-anchor" href="#package-json" aria-hidden="true">#</a> package.json</h4><p>采用局部模式安装包，node需要通过<code>package.json</code>文件来记录安装包的各种信息，所以在采用局部模式安装包前，需要先执行命令<code>npm init</code>，执行之后，会在终端所在的文件夹内创建一个<code>package.json</code>文件。</p><p><img src="'+o+'" alt="image-20230513112718696"></p><p>当敲击代码之后，终端会以提示的形式让开发者输入一些信息：</p><ul><li>package name: 包的名字</li><li>version: 版本号</li><li>description: 项目的描述信息</li><li>entry point: 入口文件</li><li>test command: 测试指令</li><li>git repository: git仓库地址</li><li>Keywords: 项目关键词</li><li>author: 项目作者</li><li>License: 协议</li></ul><p>可以一路敲击回击，这个时候每个选项就都会采用默认值。</p><blockquote><p>在执行<code>npm init</code>命令的时候，还可以在后面使用<code>-y</code>修饰，也就是<code>npm init -y</code> ，这个时候，就不会在需要开发者输入每一项的值，而是全部采用默认值。</p></blockquote><p>当命令执行完后，初始的<code>package.json</code>文件会包含如下的内容：</p><p><img src="'+i+'" alt="image-20230513113817801"></p><blockquote><p>开发者在生成<code>package.json</code>文件后，如果想要修改json文件中的某一项，可以直接打开json文件进行修改。</p></blockquote><h4 id="生产依赖和开发依赖" tabindex="-1"><a class="header-anchor" href="#生产依赖和开发依赖" aria-hidden="true">#</a> 生产依赖和开发依赖</h4><p>在开发项目的阶段，属于开发阶段，而项目上线后，就属于生产阶段。package.json中会通过<code>devDependencies</code>属性来记录开发阶段使用包的版本信息，devDependencies属性中记录的内容就可以称之为<strong>开发依赖</strong>。<code>package.json</code>通过<code>dependencies</code>属性来记录生产阶段使用的包的信息，dependencies属性记录的内容就可以称之为生产依赖。</p><p>开发者在通过npm安装第三方包的时候，需要指定当前包安装在开发环境依赖还是生产环境依赖。</p><ul><li><code>--save</code> 修饰 安装在生产环境，简写为 -S</li><li><code>--save-dev</code>修饰 安装在开发环境，简写为 -D</li></ul><p>例如，在安装<code>jquery</code>时，如果想要将jquery安装到生产依赖，可以执行<code>npm install -S jquery</code>，如果想要把jquery安装到开发环境，可以执行<code>npm install -D jquery</code>。</p><p><img src="'+p+`" alt="image-20230513114918326"></p><h4 id="卸载包" tabindex="-1"><a class="header-anchor" href="#卸载包" aria-hidden="true">#</a> 卸载包</h4><p>如果想要删除一个包，那么就直接执行<code>uninstall</code>命令即可，需要注意的是，和安装包时相同，同样需要加上依赖修饰，比如要卸载开发环境下的包，那么就需要加上<code>-D</code>，以删除开发环境的jquery为例，删除命令就为<code>npm uninstall -D jquery</code>。</p><blockquote><p>如果没有加任何修饰，那么包将直接安装到生产依赖中。</p></blockquote><h2 id="yarn-安装包" tabindex="-1"><a class="header-anchor" href="#yarn-安装包" aria-hidden="true">#</a> yarn 安装包</h2><h3 id="全局模式和局部模式" tabindex="-1"><a class="header-anchor" href="#全局模式和局部模式" aria-hidden="true">#</a> 全局模式和局部模式</h3><p>yarn在安装包的时候和npm相同，也分为全局模式和局部模式，如果想要把包安装到全局模式，可以通过下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> global <span class="token function">add</span> package-name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="生产依赖和开发依赖-1" tabindex="-1"><a class="header-anchor" href="#生产依赖和开发依赖-1" aria-hidden="true">#</a> 生产依赖和开发依赖</h3><p>如果想要将包安装在生产依赖当中，可以直接通过<code>yarn add</code> 来进行安装，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> 包名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在不需要加任何修饰的情况下，就会安装到生产依赖中。</p><p>如果想要将包安装在开发依赖当中，那么需要通过<code>--dev</code>或者<code>-D</code>来修饰，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> 包名 <span class="token parameter variable">--dev</span>
或
<span class="token function">yarn</span> <span class="token function">add</span> 包名 <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="package-json文件的其他作用" tabindex="-1"><a class="header-anchor" href="#package-json文件的其他作用" aria-hidden="true">#</a> package.json文件的其他作用</h2><h3 id="配置命令" tabindex="-1"><a class="header-anchor" href="#配置命令" aria-hidden="true">#</a> 配置命令</h3><p>可以通过配置<code>scripts</code>，来设置npm 执行的命令，比如：</p><p><img src="`+r+'" alt="image-20230513123642068"></p><p>开发者可以在<code>scripts</code>中设置命令，例如上面的代码中，设置了一个<code>start</code>命令，在终端中就可以运行<code>npm run start</code>命令，当运行该命令后，就会执行package.json文件中start对应的value中的<code>node index.js</code>这条命令。</p><h3 id="新项目的运行" tabindex="-1"><a class="header-anchor" href="#新项目的运行" aria-hidden="true">#</a> 新项目的运行</h3><p>一般来说，当开发者在开发的项目中使用package.json来管理依赖包之后，每次提交代码到远程仓库时，都会只提交package.json文件，并不会提交<code>node_modules</code>目录。</p><p>当其他人从远程仓库克隆了项目到本地后，整个克隆的项目里面也是没有node_modules目录的。这个时候，直接运行项目是运行不起来的，会在终端中发生报错。</p><p>这个时候就需要在运行项目之前，先执行<code>npm install</code> 命令，注意<code>install</code>后面没有跟随任何参数，执行这条命令的目的就是根据package.json中记录的包的版本进行包的下载。</p><p>当完整的下载了package.json中记录的所有依赖包之后，才能运行整个项目。</p><h2 id="npmjs-com" tabindex="-1"><a class="header-anchor" href="#npmjs-com" aria-hidden="true">#</a> npmjs.com</h2><p>在这个站点中，包含了所有的第三方的npm包，我们通常可以在这个站点中搜索并且了解一些包的使用。</p><p><img src="'+t+'" alt="image-20230513165625184"></p><p>比如可以搜索lodash，就可以看到这个包的一些信息。</p><p><img src="'+l+'" alt="image-20230513165710635"></p><p><img src="'+h+'" alt="image-20230513165812685"></p>',61),g=[u];function b(v,k){return a(),n("div",null,g)}const f=e(m,[["render",b],["__file","npmheyarn.html.vue"]]);export{f as default};
