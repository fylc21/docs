import{_ as s,o as n,c as a,e}from"./app-82380d9e.js";const p="/docs/assets/image-20230519072103140-f6ec0674.png",t="/docs/assets/image-20230519071845850-e10d1807.png",o="/docs/assets/image-20230519072602972-7d01fa5c.png",c="/docs/assets/image-20230519072722426-1bd6cf14.png",l="/docs/assets/image-20230519075110664-79b76c7c.png",i="/docs/assets/image-20230519080050387-8a029ff7.png",r="/docs/assets/image-20230519083400551-00d11461.png",u="/docs/assets/image-20230519085133488-dae39604.png",d="/docs/assets/image-20230519102602850-bb5957ff.png",k="/docs/assets/image-20230519102611410-529b63ad.png",v="/docs/assets/image-20230519102640197-f4054d07.png",m="/docs/assets/image-20230519103117775-5a07f758.png",b="/docs/assets/image-20230519105545169-ec887d6e.png",g="/docs/assets/image-20230519110429495-054b74f2.png",y="/docs/assets/image-20230519111625494-40797272.png",h="/docs/assets/image-20230519112511467-e4ccbe2f.png",x="/docs/assets/image-20230519112440080-b8839289.png",q="/docs/assets/image-20230519113521838-8a77a6a6.png",j="/docs/assets/image-20230519114236676-a641188c.png",f="/docs/assets/image-20230519133740365-64c89b2a.png",w="/docs/assets/image-20230519135802589-56d1ab87.png",_="/docs/assets/image-20230519140158315-96b91206.png",S="/docs/assets/image-20230519140240645-47d3e1cc.png",P="/docs/assets/image-20230519142835291-ba218985.png",W="/docs/assets/image-20230519142957542-064f6833.png",M="/docs/assets/image-20230519144152829-8c60d674.png",C="/docs/assets/image-20230519144518607-2daa2c35.png",H="/docs/assets/image-20230519144808101-cf3c6d5e.png",z="/docs/assets/image-20230519145102584-77e6bf76.png",E="/docs/assets/image-20230519173811369-fcb95ef9.png",A="/docs/assets/image-20230519185355333-55e0add2.png",J="/docs/assets/image-20230519185457360-2e17eb55.png",$="/docs/assets/image-20230519192614054-21da8217.png",D="/docs/assets/image-20230519215434749-80080509.png",T="/docs/assets/image-20230519220252012-bc7610d7.png",L="/docs/assets/image-20230519220438498-e6a8a99c.png",O="/docs/assets/image-20230519220940431-fac81445.png",U="/docs/assets/image-20230519221731934-7a3f2b79.png",R="/docs/assets/image-20230519222434765-9e0616e3.png",B="/docs/assets/image-20230519223054884-1c8f2d92.png",V="/docs/assets/image-20230519223338235-2a55b503.png",F="/docs/assets/image-20230519223453509-46104ac4.png",N="/docs/assets/image-20230519232019804-852a3636.png",I="/docs/assets/image-20230519233642804-52755baf.png",G="/docs/assets/image-20230520000706673-b78709d2.png",K={},Q=e(`<h2 id="esm-模块化规范" tabindex="-1"><a class="header-anchor" href="#esm-模块化规范" aria-hidden="true">#</a> ESM 模块化规范</h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h3><p>ESM (ES6模块化)是JavaScript语言内置的模块化规范，它的特点是语法简洁、模块依赖明确、引入方式灵活。</p><p>ES Module 主要有以下的特点：</p><ol><li>ESM采用静态引入方式，即模块的引入必须在代码的顶层位置，并且不能在函数或循环等结构中使用。</li><li>ESM采用声明式语法来定义模块，每个模块都必须使用export关键字来导出自己的接口，使用import关键字来引入其他模块的接口。</li><li>ESM支持默认导出和命名导出两种方式，其中默认导出只能有一个，而命名导出可以有多个。</li><li>ESM支持动态导入方式，即可以在运行时根据条件动态引入模块，这样可以提高应用的灵活性和效率。</li></ol><h3 id="esm具体使用" tabindex="-1"><a class="header-anchor" href="#esm具体使用" aria-hidden="true">#</a> ESM具体使用</h3><p>ESM模块化规范在具体使用的过程中可以分为以下几种：</p><ul><li>默认导出</li><li>命名导出</li><li>动态导入</li><li>命名空间导入</li></ul><h4 id="默认导出" tabindex="-1"><a class="header-anchor" href="#默认导出" aria-hidden="true">#</a> 默认导出</h4><p>默认导出模式在导出内容时，主要通过<code>export default</code>来进行导出。导出的值可以是一个对象，也可以是一个函数或者其他的数据。在另外的模块中，可以直接通过<code>import ... from ...</code>的形式来进行引入。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// b模块 -- 导出</span>
<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> rest<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> prev <span class="token operator">+</span> curr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  add
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a模块 -- 导入</span>
<span class="token keyword">import</span> obj <span class="token keyword">from</span> <span class="token string">&#39;./b模块.js&#39;</span>

obj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在b模块中直接默认导出的内容是add函数，那么在a模块中就可以直接导入add函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// b模块 -- 导出</span>
<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> rest<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> prev <span class="token operator">+</span> curr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> add
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a模块 -- 导入</span>
<span class="token keyword">import</span> add <span class="token keyword">from</span> <span class="token string">&#39;./b模块.js&#39;</span>

<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="命名导出" tabindex="-1"><a class="header-anchor" href="#命名导出" aria-hidden="true">#</a> 命名导出</h4><p>命名导出指的是在b模块中每个导出的内容都是通过export来导出的，在a模块中就可以直接从引入模块的结果中进行解构，从而得到b模块中导出的内容。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// b 模块 -- 导出</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">del</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a 模块 -- 导入</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> del <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./02_命名导出b.js&#39;</span>

<span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="动态导入" tabindex="-1"><a class="header-anchor" href="#动态导入" aria-hidden="true">#</a> 动态导入</h4><p>ESM支持动态导入方式，即可以在运行时根据条件动态引入模块。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// b 模块 -- 导出</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 也可以设置为export default</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a 模块 -- 导入</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">importFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./03_动态导入b.js&#39;</span><span class="token punctuation">)</span>
  obj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">importFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="命名空间导入" tabindex="-1"><a class="header-anchor" href="#命名空间导入" aria-hidden="true">#</a> 命名空间导入</h4><p>ESM支持一次性导入多个模块，并将它们作为一个对象的属性暴露出去。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// b 模块 -- 导出</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">fn1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a 模块 -- 导入</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> moduleB <span class="token keyword">from</span> <span class="token string">&#39;./04_命名空间导入b.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="webpack介绍" tabindex="-1"><a class="header-anchor" href="#webpack介绍" aria-hidden="true">#</a> webpack介绍</h2><p>核心点：</p><ul><li>静态资源打包工具。</li><li>将其他类型文件根据程序的依赖关系编译打包成一个或者多个文件。 <ul><li>浏览器仅仅认识<code>html</code>、<code>css</code>和<code>js</code>，webpack可以将众多例如less、sass等浏览器不识别的语法打包编译成浏览器识别的语法。</li></ul></li><li>兼容性处理。</li><li>性能优化。</li></ul><p>webpack中的模式：</p><ul><li>开发模式 <ul><li>仅能编译JS中的<code>ES Module</code>语法</li></ul></li><li>生产模式 <ul><li>能编译JS中的<code>ES Module</code>语法，还能压缩js代码</li></ul></li></ul><p>关键词：</p><ul><li>bundle</li><li>chunk</li><li>entry</li><li>output</li><li>rules</li><li>plugins</li><li>optimization</li><li>mode</li><li>loader</li><li>tree-shaking</li><li>Code Splitting</li><li>HMR</li><li>devServer</li><li>cache</li></ul><h2 id="前置" tabindex="-1"><a class="header-anchor" href="#前置" aria-hidden="true">#</a> 前置</h2><p>学习webpack，最起码应该已经学习或者了解如下的知识点：</p><ul><li>html</li><li>css</li><li>js</li><li>node</li><li>npm</li><li>模块化</li></ul><p>同时，开发者电脑当中也应该装有不低于14版本的nodejs。本文当中将以webpack5为基准，如果开发中使用的是webpack4，则会有诸多不一样的地方，请注意。</p><p>在本文中会把所有包的版本全部贴出，在学习阶段尽量保证包的版本一致或者大版本相差不大，否则容易导出出现一些异常。</p><p><strong>安装webpack</strong></p><p>为了减少本地项目与项目之间的冲突，这里将会把webpack安装在局部环境当中。</p><p>想要学习和使用webpack，需要同时安装两个包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> webpack webpack-cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>此时就会默认的安装最新的webpack版本。</p></blockquote><blockquote><p>别忘了在安装之前<code>npm init</code>一下。</p></blockquote><blockquote><p>请根据自己实际的开发情况斟酌这两个工具包是安装在生产依赖还是开发依赖当中。</p></blockquote><p>安装的webpack和webpack-cli：</p><p><img src="`+p+`" alt="image-20230519072103140"></p><h2 id="webpack的初次运行" tabindex="-1"><a class="header-anchor" href="#webpack的初次运行" aria-hidden="true">#</a> webpack的初次运行</h2><h3 id="项目的目录和文件" tabindex="-1"><a class="header-anchor" href="#项目的目录和文件" aria-hidden="true">#</a> 项目的目录和文件</h3><p>一般在项目中，源代码目录都被称为<code>src</code>，打包输出的目录都被称为<code>dist</code>。</p><p>这里首先在项目的根目录创建一个<code>src</code>目录，并且在src目录中创建一个hello.js文件。并且在文件中编写代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// hello.js</span>
<span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello,world&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> sayHello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">import</span> hello <span class="token keyword">from</span> <span class="token string">&#39;./hello.js&#39;</span>

<span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+t+'" alt="image-20230519071845850"></p><h3 id="第一次运行打包编译命令" tabindex="-1"><a class="header-anchor" href="#第一次运行打包编译命令" aria-hidden="true">#</a> 第一次运行打包编译命令</h3><p>上面用来测试的代码编写完成后，在<strong>项目的根目录</strong>打开终端，执行<code>npx webpack</code>命令。</p><p><img src="'+o+'" alt="image-20230519072602972"></p><blockquote><p>这里先忽略掉终端中提示的红色信息，后面会单独讲到。</p></blockquote><p>当命令执行完毕后，就可以在项目的根目录下看到dist目录，dist目录下存在一个main.js，这个文件就是打包生成的文件。</p><p><img src="'+c+`" alt="image-20230519072722426"></p><blockquote><p><code>npx</code>是 npm 5.2+ 版本中新增的一个命令行工具，用于快速执行来自 npm 仓库中的命令行工具，也可以直接运行文件夹内安装的命令行工具。</p><p><code>npx</code> 的主要作用有两个：</p><ol><li>执行项目依赖中安装的命令行工具，无需全局安装。</li><li>临时安装并执行来自 npm 仓库的命令行工具。</li></ol><p>一般来说，命令行工具都会被安装到全局模式下，然后才能使用。比如<code>npm i -g nodemon</code>，采用全局安装后，才能在任何的项目中使用<code>nodemon</code>。</p><p>但是本文中考虑到不同项目不同的webpack版本也不一样，所以这里采用的是局部安装。当webpack被局部安装后，会在本地的<code>node_modules</code>中构建出一个<code>.bin</code>目录，这个目录中放置的都是一些可执行的二进制文件。当开发者通过<code>npx webpack</code>时，npm就会首先去.bin目录查找可执行的二进制文件。</p><p>如果npx后面跟的不是一个已经安装过的包命令，那么npx就会临时下载使用，用完再自动删除。</p></blockquote><p>上面的实践当中，我们在没有任何配置的情况下就对代码进行了打包，这是一种webpack推出的叫做<code>零配置打包</code>的方式。</p><h3 id="输出状态信息的解读" tabindex="-1"><a class="header-anchor" href="#输出状态信息的解读" aria-hidden="true">#</a> 输出状态信息的解读</h3><p>想要了解打包信息，我们可以关注一下在打包过程中终端中出现的核心提示信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>asset main.js 50 bytes [emitted] [minimized] (name: main)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这句话意思是，Webpack将文件打包成了一个名为main.js的文件，其中包含了50字节的代码。这个文件被成功生成并输出到指定目录。同时，这个文件也被压缩了，并被标记为已打包（emitted）和已压缩（minimized）。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>orphan modules 77 bytes [orphan] 1 module
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这句话是Webpack提示产生的警告信息，意思是存在一个孤立的模块（orphan modules， 也可以称之为孤儿模块）占用了77字节的空间，并且这个模块没有被其它模块引用，被认为是无用的（1 module）。</p><blockquote><p>孤儿模块（Orphan Module）</p><p>简单来说，孤儿模块是指在打包过程中，因为某些原因（例如代码执行顺序等问题）未能被正确引用，从而被 Webpack 打包工具认为是无用的模块。</p><p>具体来说，这种情况常见于异步加载等情况下。在 Webpack 打包过程中，如果异步加载的模块暂时没有被引用，这些模块就被认为是孤儿模块。</p><p>孤儿模块存在的问题在于，它们会被打包到最终的代码包中，而这些无用的代码会增加代码包的体积，造成性能上的影响。</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./src/index.js + 1 modules 116 bytes [built] [code generated]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这句话是Webpack打包时输出的提示信息，包含了以下信息：</p><ul><li><code>./src/index.js</code>是Webpack打包的入口文件，表示Webpack正在处理这个文件。</li><li><code>+1 modules</code>表示这个文件依赖了一个模块。</li><li><code>116 bytes [built]</code>表示这个文件经过Webpack处理后，生成的对应的bundle文件大小为116字节，表示这个文件成功打包。</li><li><code>[code generated]</code>表示Webpack已经生成了JavaScript代码，该代码与输入模块的源代码相同。</li></ul><p><img src="`+l+`" alt="image-20230519075110664"></p><p>在终端中还存在着上面图片中的一个警告。</p><p>这段警告是Webpack在启动时输出的信息，意为Webpack配置中没有设置&#39;mode&#39;选项，Webpack会自动使用&#39;production&#39;模式。</p><p>同时提示开发者可以通过设置&#39;mode&#39;选项来启用开发环境或生产环境的默认值。可以将&#39;mode&#39;设置为&#39;development&#39;或&#39;production&#39;来使用对应的默认配置，也可以设置为&#39;none&#39;来禁用任何默认行为。</p><blockquote><p>关于mode模式的问题后面再来解决。</p></blockquote><h3 id="显示详细的输出状态信息" tabindex="-1"><a class="header-anchor" href="#显示详细的输出状态信息" aria-hidden="true">#</a> 显示详细的输出状态信息</h3><p>上面通过零配置的形式对代码进行了打包，并且也逐行分析了一下终端中输出的信息。</p><p>如果想要查看更加详细的信息，可以通过<code>--stats detailed</code>来查看。</p><blockquote><p><code>--stats detailed</code> 是Webpack在命令行中的一个可选参数，用于控制Webpack输出的状态信息的详细程度。它会告诉Webpack在完成构建后，显示一个详细的报告，其中包含有关打包资源的所有信息，例如输出文件的名称、大小、生成时间、依赖模块、生成文件的hash值等。</p></blockquote><p>在终端中执行下面的命令来重新打包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx webpack <span class="token parameter variable">--stats</span> detailed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+i+`" alt="image-20230519080050387"></p><p>可以很明显的发现，当加上<code>-stats detailed</code>参数后，终端中打印的信息一下变得多了起来。</p><p>下面来对出现的信息做一个解读：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sset main.js 50 bytes {179} [compared for emit] [minimized] (name: main)
Entrypoint main 50 bytes = main.js
chunk {179} (runtime: main) main.js (main) 116 bytes [entry] [rendered]
  &gt; ./src  main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段话是Webpack在完成构建后输出的一段状态信息，具体含义如下：</p><ul><li><code>asset main.js 50 bytes {179} [compared for emit] [minimized] (name: main)</code>：表示Webpack生成一个名为<code>main.js</code>的文件，文件大小为50字节。<code>{179}</code>表示文件的代码唯一标识符，其中的数字为Webpack自动生成的哈希值。<code>[compared for emit]</code>表示Webpack编译时与之前版本进行了比较，只有改变的部分才被重新编译，这是Webpack的优化策略之一。<code>[minimized]</code>表示代码被压缩。<code>(name: main)</code>表示这个文件的名称是main，说明它是应用程序的入口文件。</li><li><code>Entrypoint main 50 bytes = main.js</code>：表示这个JavaScript应用程序的入口点（entry point）名称为main，Webpack会从该入口点开始构建依赖树和打包过程。该入口点打包后的文件大小为50字节，与前面的输出重复。</li><li><code>chunk {179} (runtime: main) main.js (main) 116 bytes [entry] [rendered] &gt; ./src main</code>：表示Webpack生成了一个代码块（chunk），<code>{179}</code>还是表示这个代码块的唯一标识符。<code>(runtime: main)</code>表示这个代码块是生成代码块（runtime chunk），它包含了Webpack启动时需要的辅助代码。<code>main.js (main) 116 bytes</code>表示这个代码块生成的文件名为main.js，文件大小为116字节，其中包含了应用程序的入口文件main.js以及src目录下的其他模块文件。<code>[entry]</code>表示这个代码块是应用程序的入口点，<code>[rendered]</code>表示这个代码块已经被Webpack成功的打包渲染。<code>&gt; ./src main</code>表示除entry point之外的依赖文件来自于./src目录下，主模块的名称为main。</li></ul><p>总的来说，这段状态信息告诉我们，Webpack成功的生成了一个JavaScript应用程序，包含了一个名为main.js的文件，大小为50字节。该应用程序的入口点为main，该入口点所依赖的模块文件来自于src目录。该应用程序还包含了一个代码块，其中包含了应用程序的入口文件以及来自于src目录下的其他模块文件，生成的文件名为main.js，大小为116字节。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>orphan modules 77 bytes [orphan] 1 module
./src/index.js + 1 modules [271] 116 bytes {179} [depth 0] [built] [code generated]
  [no exports]
  [no exports used]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段话是Webpack在状态信息中另外一段含义，跟之前的含义不大相同。具体含义如下：</p><ul><li><code>orphan modules 77 bytes [orphan] 1 module</code>：该信息表示，Webpack在构建过程中发现了77字节的未被引用的（孤立的）模块。其中 <code>[orphan]</code> 说明这个模块未被引用，即没有找到引用它的 JavaScript 模块，因此被视为“孤立的”或“未使用的”。<code>1 module</code>则表示这样的未使用/未引用的模块有1个，共计77字节。在打包过程中，这些“孤立模块”并没有被打包到输出文件中。</li><li><code>./src/index.js + 1 modules [271] 116 bytes {179} [depth 0] [built] [code generated]</code>：该信息告诉我们，发现了一些孤立模块，其中包括<code>./src/index.js</code>入口模块以及1个其他模块，共分配了116字节的内存空间 <code>{179}</code>是这个模块的独有标识符。<code>[depth 0]</code>表示这个模块对应的Chunk深度为0，即根模块；<code>[built]</code>表示webpack已经成功构建了这个模块；<code>[code generated]</code>则说明webpack自动生成了这个模块的代码，它可能是一个Loading Chunk、Manifest Chunk或运行时代码块等，需要被包含在输出文件中，即使这个模块没有被其他模块引用。<code>[no exports]</code>和<code>[no exports used]</code>表示这个模块可用，但没有被任何其他的模块引用到。</li></ul><p>总的来说，这段状态信息是告诉我们，Webpack在打包过程中发现了一些孤立的模块，已经识别和标记了这些模块，并且没有将它们包含在Webpack打包后的JavaScript文件中。其中，这些孤立模块可能是某些辅助模块，也可能是因为代码变更而暂时未被其他模块引用的模块。</p><h2 id="webpack的配置文件" tabindex="-1"><a class="header-anchor" href="#webpack的配置文件" aria-hidden="true">#</a> webpack的配置文件</h2><p>在上面的内容中，我们通过零配置对代码进行了初次的打包。但是实际的开发过程中，往往零配置并不能满足我们的需求，这个时候就需要创建一个配置文件，在配置文件中编写更为复杂的打包规则。</p><p>webpack中默认就支持的配置文件名为<code>webpack.config.js</code>，一般这个配置文件会被存放在<strong>项目的根目录</strong>下。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 导出一个对象</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 设置入口文件</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 设置出口文件</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 打包输出的文件名</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./dist&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 设置模式</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建好配置文件后，再次在终端中运行<code>npx webpack</code>命令，查看效果。</p><p><img src="`+r+`" alt="image-20230519083400551"></p><p>如果想要指定其他文件为配置文件，可以通过<code>-c</code>或者<code>-config</code>来指定。</p><p>比如可以在项目的根目录下创建一个<code>webpack.haha.js</code>，在里面编写一些配置项。</p><p>在执行命令的时候，可以加上<code>-c</code>。</p><p>如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx webpack <span class="token parameter variable">-c</span> webpack.haha.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以在package.json文件中设置一条命令来决定使用不同的配置文件。</p><p><img src="`+u+`" alt="image-20230519085133488"></p><h2 id="自动引入资源" tabindex="-1"><a class="header-anchor" href="#自动引入资源" aria-hidden="true">#</a> 自动引入资源</h2><p>上面的内容虽然已经成功的打包了资源，但是打包出来的js文件，还需要开发者手动的引入到网页文件中。</p><p>而如果资源较多的情况下就非常容易出现因为引入代码的顺序不同导致的异常。</p><p>在webpack中可以通过插件plugin来解决。</p><p>plugin插件是webpack中的核心功能，可以用来执行一些特定的任务，包括：</p><ul><li>打包优化</li><li>资源管理</li><li>注入环境变量</li><li>....</li></ul><p>如果需要使用插件，需要通过下面的几个步骤：</p><ul><li>下载插件</li><li>引入插件</li><li>在plugins数组中添加插件</li><li>添加定义信息</li></ul><p><strong>这里用来帮助我们自动引入资源的插件名为HtmlWebpackPlugin</strong>,可以通过下面的命令来进行安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> html-webpack-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成后在<code>webpack.config.js</code>配置文件中添加配置项。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>


module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./dist&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 插件</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./public/index.html&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 文件模板</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;app.html&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 生成的文件名</span>
      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token string">&#39;body&#39;</span> <span class="token comment">// 资源文件注入到模板的位置 head body true false</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写完配置文件后，直接通过<code>npx webpack</code>命令打包。</p><p>就可以在dist目录看到打包生成的网页文件和js文件了。</p><p><img src="`+d+'" alt="image-20230519102602850"></p><p><img src="'+k+'" alt="image-20230519102611410"></p><p>此时打开html文件，就可以在这个文件中看到对资源的自动引用。</p><p><img src="'+v+'" alt="image-20230519102640197"></p><blockquote><p><code>defer</code>属性：表示请求指向的JavaScript文件是延迟加载的。当浏览器遇到带有<code>defer</code>属性的<code>&lt;script&gt;</code>标签时，会下载该文件，但是并不会立即执行。它会等到整个文档解析完成以后，再按照<code>&lt;script&gt;</code>标签出现的顺序依次执行每个带有<code>defer</code>属性的<code>&lt;script&gt;</code>标签。因此，<code>defer</code>属性可以保证获得更好的页面渲染性能，同时也不会影响JavaScript代码的执行。</p><p><code>async</code>属性：表示请求指向的JavaScript文件是异步加载的。当浏览器遇到带有<code>async</code>属性的<code>&lt;script&gt;</code>标签时，会立即下载并异步执行这段代码，同时不会阻塞后续HTML内容的加载和渲染。如果有多个带有<code>async</code>属性的<code>&lt;script&gt;</code>标签，下载和执行的顺序是不确定的。</p></blockquote><h2 id="清理上一次的打包文件" tabindex="-1"><a class="header-anchor" href="#清理上一次的打包文件" aria-hidden="true">#</a> 清理上一次的打包文件</h2><p>在非第一次打包时，如果输出的文件名和上一次文件名不同，就会在dist目录中看到多次打包的结果。如果想要清除之前的打包结果，可以在output属性的值中设置<code>clean: true</code>，就可以实现清除上一次打包文件的问题。</p><p><img src="'+m+'" alt="image-20230519103117775"></p><h2 id="设置mode模式" tabindex="-1"><a class="header-anchor" href="#设置mode模式" aria-hidden="true">#</a> 设置mode模式</h2><p>webpack中有两种模式，分别是<code>production</code>生产模式以及<code>development</code>开发模式。想要设置模式可以通过<code>mode</code>属性在配置文件中进行设置。</p><p>同时，针对不同mode模式也可以创建出不同的config配置文件，然后在package.json文件中配合<code>scripts</code>设置不同命令。</p><p>首先创建两个不同的config文件。</p><p><img src="'+b+`" alt="image-20230519105545169"></p><p>之后，删除之前测试的命令，然后在scripts中编写不同的命令：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npx webpack -c webpack.config.dev.js&quot;</span><span class="token punctuation">,</span>
<span class="token string-property property">&quot;prod&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npx webpack -c webpack.config.prod.js&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>编写完成后如下：</p><p><img src="`+g+`" alt="image-20230519110429495"></p><p>接下来，我们先来把webpack.config.dev.js文件中的配置信息编写一下。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.dev.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;html-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;bundle.js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;./public/index.html&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;app.html&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token string">&quot;body&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以同时把webpack.config.prod.js文件中的配置信息配置一下。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.prod.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;html-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;bundle.js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;./public/index.html&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;app.html&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token string">&quot;body&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样配置完成后，就可以通过命令<code>npm run dev</code>来运行开发环境的打包，通过<code>npm run prod</code>来运行生产环境的打包。</p><h2 id="设置source-map" tabindex="-1"><a class="header-anchor" href="#设置source-map" aria-hidden="true">#</a> 设置source map</h2><p>在使用打包编译之后的代码时，如果出现了错误和异常，开发者很难追踪到源代码中的错误位置。</p><p>比如：</p><p><img src="`+y+'" alt="image-20230519111625494"></p><p>上面代码中的2、3行分别抛出错误。这个时候对代码进行打包。然后在浏览器中查看出现的错误，会发现错误的行数和源代码中的错误代码所在行并不是同一行。</p><p><img src="'+h+`" alt="image-20230519112511467"></p><p>这样的话就会对程序的排错带来影响，如果想要解决这个问题，可以使用<code>source map</code>功能来解决这个问题。</p><p>当开启了source map功能后，就可以将编译后的代码映射到源代码，这样的话就可以更加方便的排查错误。</p><p>我们可以在<code>webpack.config.dev.js</code>文件中(开发模式)添加如下的内容：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&#39;inline-source-map&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加好配置文件后再来编译查看。</p><p><img src="`+x+`" alt="image-20230519112440080"></p><h2 id="开启watch-mode" tabindex="-1"><a class="header-anchor" href="#开启watch-mode" aria-hidden="true">#</a> 开启watch mode</h2><p>在开发模式下，开发者往往需要经常性的修改代码，每次修改完代码还需要再次进行打包查看代码结果相对来说较为繁琐，这个时候就可以在启动打包命令的时候，加上<code>--watch</code>参数，这样就开启了watch mode模式，当运行命令后，程序编译完成后并不会结束进程，而是会时刻监视源代码的修改。</p><p>当监视到了文件修改后，就会自动的重新编译修改后的模块。</p><blockquote><p>一般来说，watch mode模式都会在development模式下使用。</p></blockquote><p>首先可以通过下面的命令来查看效果:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx webpack <span class="token parameter variable">-c</span> webpack.config.dev.js <span class="token parameter variable">--watch</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以直接在<code>scripts</code>中添加一条命令：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token string-property property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npx webpack -c webpack.config.dev.js --watch&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编写完成后就可以直接通过<code>npm run serve</code>命令来测试：</p><p><img src="`+q+`" alt="image-20230519113521838"></p><p>当运行命令后，可以发现终端并没有在打包完成后停止运行，而是在等待代码的更新。</p><h2 id="配置webpack-dev-server" tabindex="-1"><a class="header-anchor" href="#配置webpack-dev-server" aria-hidden="true">#</a> 配置webpack-dev-server</h2><p>上面配置了watch mode模式后，webpack就可以实时监听代码的改变。但是watch mode虽然实时监听了文件的变化，但是编译完成后如果开发者想要在浏览器中看到效果确是还需要手动的刷新浏览器的。</p><p>如果想要浏览器可以热更新，可以使用<code>webpack-dev-server</code>这个工具。</p><p>通过下面的命令进行下载：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> webpack-dev-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在配置文件中设置dev-server。</p><p><img src="`+j+`" alt="image-20230519114236676"></p><p>配置好后，我们来添加一条新的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token string">&quot;live&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;npx webpack serve -c webpack.config.dev.js --open&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来在终端中执行<code>npm run live</code>命令就可以开启dev-server，并且会自动打开浏览器，实时监听文件的变化。</p><blockquote><p>webpack-dev-server 并不会输出任何文件，所有的内容都会被编译之后存储在内存中。</p></blockquote><h2 id="处理css资源" tabindex="-1"><a class="header-anchor" href="#处理css资源" aria-hidden="true">#</a> 处理css资源</h2><p>webpack本身只能处理JavaScript资源内容和JSON，如果想要让webpack支持处理其他文件类型，就需要使用loader。</p><p>loader的使用，可以让webpack支持更多的文件类型，并且将这些文件转换为有效的模块，从而供应用程序使用。</p><p>一般来说，webpack中的loader主要设置在<code>module</code>对象中的<code>rules</code>数组中，每条loader规则以对象的形式存在。</p><p><img src="`+f+`" alt="image-20230519133740365"></p><p>在loader对象中主要依赖两个属性存在，分别是<code>test</code>和<code>use</code>。</p><ul><li>test属性：识别需要转换的文件。</li><li>use属性：定义在进行转换时，应该使用哪个loader。</li></ul><blockquote><p>loader 不需要通过require()函数进行引入。</p></blockquote><h3 id="处理样式资源" tabindex="-1"><a class="header-anchor" href="#处理样式资源" aria-hidden="true">#</a> 处理样式资源</h3><p>这里我们先来处理css资源。</p><p>处理css需要同时使用两个loader：</p><ul><li>style-loader: 会动态创建一个style标签，里面放置webpack中的css模块内容</li><li>css-loader:负责将css文件编译成webpack能识别的模块</li></ul><p>通过下面的命令来安装loader：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i css-loader style-loader <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在配置文件中进行配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;style-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css-loadeer&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 一定要注意，loader是从右向左执行</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>规则配置完成后，可以在src目录中创建一个css文件用于测试。</p><p><img src="`+w+'" alt="image-20230519135802589"></p><p>创建完成后，需要在作为入口的js文件中引入。</p><p><img src="'+_+'" alt="image-20230519140158315"></p><p>引入完成后可以通过命令进行打包编译，然后打开浏览器查看效果：</p><p><img src="'+S+`" alt="image-20230519140240645"></p><p>如果还有其它类型的样式资源，可以分别通过下面的loader来进行处理：</p><ul><li>less-loader</li><li>sass-loader</li><li>stylus-loader</li></ul><p>上面这几种loader都需要配合<code>style-loader</code>和<code>css-loader</code>一起使用。</p><blockquote><p>使用前别忘了通过<code>npm install</code> 命令进行安装，都安装在开发依赖当中就可以了。</p></blockquote><blockquote><p>也可以通过<code>npm i -D less-loader sass-loader stylus-loader</code>命令一次性全部装好，也可以分批安装。</p></blockquote><p>下面是针对这几种css文件的rule规则设置。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;less-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.s[ac]ss$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sass-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.styl$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;stylus-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面以less为例，进行测试。在项目中创建一个less文件，然后在入口文件中引入。</p><p><img src="`+P+'" alt="image-20230519142835291"></p><p>执行编译命令，打开网页看效果：</p><p><img src="'+W+`" alt="image-20230519142957542"></p><h3 id="将样式资源提取成独立的css文件" tabindex="-1"><a class="header-anchor" href="#将样式资源提取成独立的css文件" aria-hidden="true">#</a> 将样式资源提取成独立的css文件</h3><p>接下来我们把嵌入到head里面的style标签抽离成独立的css文件。</p><p>这里需要使用<code>mini-css-extract-plugin</code>这个插件。通过mini-css-extract-plugin这个插件就可以将css代码抽离成独立的css文件。</p><p>使用步骤：</p><ul><li>下载</li><li>引入包</li><li>设置插件</li><li>配置插件</li><li>MiniCssExtractPlugin.loader替代style-loader</li></ul><p>1、通过下面的命令来安装包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> mini-css-extract-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、在配置文件中引入包。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-css-extract-plugin&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、设置插件。</p><p><img src="`+M+'" alt="image-20230519144152829"></p><p>4、配置插件</p><p><img src="'+C+'" alt="image-20230519144518607"></p><p>5、替换style-loader</p><p><img src="'+H+'" alt="image-20230519144808101"></p><p>配置好之后，执行编译。就可以在dist目录中看到编译好的css文件。</p><p><img src="'+z+`" alt="image-20230519145102584"></p><h2 id="处理图片" tabindex="-1"><a class="header-anchor" href="#处理图片" aria-hidden="true">#</a> 处理图片</h2><p>在开发项目的时候，肯定会使用到图片。而webpack5中内置了处理资源的方式，不需要额外的下载插件或者loader。</p><p>下面是webpack5中新增加的资源类型：</p><ul><li><code>asset/resource</code>发送一个单独的文件并且导出url</li><li><code>asset/inline</code>导出一个资源的data url</li><li><code>asset/source</code>导出资源的源代码</li><li><code>asset</code>在导出一个data url和发送一个文件之间选择</li></ul><p>下面以处理图片为例，在配置文件中加入处理图片的规则：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpe?g|gif|webp)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;asset&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token comment">// 小于20kb的图片会被base64处理</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中将type属性的值设置为<code>asset</code>，也就是上面提到的webpack5中新增加的资源类型。</p><p>后面<code>parser</code>中<code>dataUrlCondition</code>的设置，能够针对图片的大小进行区别处理，如果小于20kb，图片会被转换成base64，如果大于20kb，则直接复制到dist打包目录。</p><p>下面是用来测试的css代码：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.bg1</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../images/01.jpg<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.bg2</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../images/02.jpg<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.bg3</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>../images/03.jpg<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在导出图片的时候，想要设置导出图片的位置，可以在之前的匹配图片的rule中添加<code>generator</code>，在generator中设置filename属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">// 将图片文件输出到 imgs 目录中</span>
  <span class="token comment">// 将图片文件命名 [hash:8][ext][query]</span>
  <span class="token comment">// [hash:8]: hash值取8位</span>
  <span class="token comment">// [ext]: 使用之前的文件扩展名</span>
  <span class="token comment">// [query]: 添加之前的query参数</span>
  <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;imgs/[hash:8][ext][query]&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="处理字体文件" tabindex="-1"><a class="header-anchor" href="#处理字体文件" aria-hidden="true">#</a> 处理字体文件</h2><p>处理字体文件的方法和处理图片类似，依托于<code>asset/resource</code>。</p><p><code>asset/resource</code>和前面用到的<code>asset</code>的区别:</p><ul><li>type: &quot;asset/resource&quot; 相当于file-loader, 将文件转化成 Webpack 能识别的资源，其他不做处理</li><li>type: &quot;asset&quot; 相当于url-loader, 将文件转化成 Webpack 能识别的资源，同时小于某个大小的资源会处理成 data URI 形式</li></ul><p>接下来需要在rules中添加规则：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(ttf|woff2?)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;asset/resource&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;static/media/[hash:8][ext][query]&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="压缩css代码" tabindex="-1"><a class="header-anchor" href="#压缩css代码" aria-hidden="true">#</a> 压缩css代码</h2><p>压缩css代码可以通过<code>css-minimizer-webpack-plugin</code>来实现。</p><p>通过下面的命令安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> css-minimizer-webpack-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下载完成后需要先在配置文件中引入。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> CssMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;css-minimizer-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>直接在和module和plugins同级别的位置设置optimization。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 优化配置</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CssMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+E+`" alt="image-20230519173811369"></p><p>配置完成后，打包查看效果。</p><blockquote><p>打包效果放在production模式下才有效果。</p></blockquote><h2 id="css兼容处理" tabindex="-1"><a class="header-anchor" href="#css兼容处理" aria-hidden="true">#</a> CSS兼容处理</h2><p>在编写css的时候，为了做到更好的兼容性，可以通过给兼容性较差的属性加上浏览器前缀来解决兼容性问题。</p><p>可以通过下面的命令来安装所需要的工具：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i postcss-loader postcss postcss-preset-env <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成后，修改css的规则：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 处理css文件</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>
    <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 处理css兼容性</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;postcss-loader&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">postcssOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token string">&#39;postcss-preset-env&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 能解决大多数样式兼容性问题</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成后，还需要在<code>package.json</code>文件中设置一下浏览器兼容列表：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token comment">// 省略其他</span>
  <span class="token property">&quot;browserslist&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;&gt; 1%&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;last 2 versions&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后可以在代码中加上一段测试代码：</p><p><img src="`+A+'" alt="image-20230519185355333"></p><p>运行命令打包代码，可以看到结果如下：</p><p><img src="'+J+`" alt="image-20230519185457360"></p><h2 id="babel-loader" tabindex="-1"><a class="header-anchor" href="#babel-loader" aria-hidden="true">#</a> babel-loader</h2><p>webpack本身支持js的加载，但是并不会对JS进行降版做兼容。如果想要做到兼容性处理，需要使用babel-loader来实现。</p><p>通过下面的命令安装依赖：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> babel-loader @babel/core @babel/preset-env <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在规则中添加js文件的规则：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来创建<code>babel.config.js</code>配置文件，编写babel配置项：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在以上配置中，我们使用了<code>@babel/preset-env</code>预设，用于为JS代码添加兼容性处理和运行时支持。</p><p>编写完成后可以写一段js代码进行测试。</p><p><img src="`+$+`" alt="image-20230519192614054"></p><p>执行命令进行编译后看结果就可以发现已经把es6转换成了es5代码。</p><h2 id="拆分生产环境和开发环境" tabindex="-1"><a class="header-anchor" href="#拆分生产环境和开发环境" aria-hidden="true">#</a> 拆分生产环境和开发环境</h2><p>一般来说，在开发环境中，除非项目规模较大，否则并不需要压缩之类的。但是生产环境下却需要进行压缩。</p><p>再比如在开发环境下需要开启dev-server但是生产环境则不需要。所以这里可以对配置代码进行拆分，从而实现生产环境和开发环境的区分。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.dev.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;html-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mini-css-extract-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;bundle.js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&quot;inline-source-map&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span><span class="token operator">:</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// loader规则对象 {}</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;less-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.s[ac]ss$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sass-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.styl$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;style-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;stylus-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpe?g|gif|webp)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;asset&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// 小于10kb的图片会被base64处理</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;imgs/[hash:8][ext][query]&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(ttf|woff2?)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;asset/resource&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;media/[hash:8][ext][query]&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span>  <span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;./public/index.html&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;index.html&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token string">&quot;body&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 定义输出文件名和目录</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;styles/[contenthash].css&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.prod.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;html-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mini-css-extract-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> CssMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;css-minimizer-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;bundle.js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&quot;inline-source-map&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// loader规则对象 {}</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>
          <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span>
          <span class="token comment">// 处理css兼容性</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;postcss-loader&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">postcssOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                  <span class="token string">&quot;postcss-preset-env&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 能解决大多数样式兼容性问题</span>
                <span class="token punctuation">]</span><span class="token punctuation">,</span>
              <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.less$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token comment">// use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>
          <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span>
          <span class="token comment">// 处理css兼容性</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;postcss-loader&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">postcssOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                  <span class="token string">&quot;postcss-preset-env&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 能解决大多数样式兼容性问题</span>
                <span class="token punctuation">]</span><span class="token punctuation">,</span>
              <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token string">&quot;less-loader&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.s[ac]ss$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>
          <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span>
          <span class="token comment">// 处理css兼容性</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;postcss-loader&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">postcssOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                  <span class="token string">&quot;postcss-preset-env&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 能解决大多数样式兼容性问题</span>
                <span class="token punctuation">]</span><span class="token punctuation">,</span>
              <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token string">&quot;sass-loader&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.styl$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
          MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span>
          <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">,</span>
          <span class="token comment">// 处理css兼容性</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&quot;postcss-loader&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">postcssOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                  <span class="token string">&quot;postcss-preset-env&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 能解决大多数样式兼容性问题</span>
                <span class="token punctuation">]</span><span class="token punctuation">,</span>
              <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token string">&quot;stylus-loader&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(png|jpe?g|gif|webp)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;asset&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// 小于20kb的图片会被base64处理</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;imgs/[hash:8][ext][query]&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(ttf|woff2?)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;asset/resource&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;media/[hash:8][ext][query]&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span>  <span class="token string">&quot;babel-loader&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&quot;./public/index.html&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;index.html&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token string">&quot;body&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 定义输出文件名和目录</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;styles/[contenthash].css&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 优化配置</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CssMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码分离" tabindex="-1"><a class="header-anchor" href="#代码分离" aria-hidden="true">#</a> 代码分离</h2><p>代码分离能够把代码分离到不同的bundle中(bundle是代码打包分离出来的文件)，然后把这些文件按需加载或者并行加载。代码分离可以用于获取更小的bundle以及控制资源加载的优先级。如果使用合理，会极大的提高加载时间。</p><p>常用的代码分离方式有三种：</p><ul><li>入口起点(多入口) <ul><li>使用entry配置手动的分离代码。</li></ul></li><li>防止重复 <ul><li>使用Entry dependencies 或者SplitChunksPlugin 去重和分离代码</li></ul></li><li>动态导入 <ul><li>通过模块的内联函数调用来分离代码</li></ul></li></ul><h3 id="多入口" tabindex="-1"><a class="header-anchor" href="#多入口" aria-hidden="true">#</a> 多入口</h3><p>在打包编译过程中，如果遇到打包文件过大的情况，解决这种问题最简单的方式就是将入口文件做拆分，然后设置多入口。</p><p>这里以上面做测试的入口文件内容为例，</p><p><img src="`+D+'" alt="image-20230519215434749"></p><p>假如此时入口文件打包之后的文件过大，那么为了解决这个问题，就可以采用多入口的设置。</p><p>首先，可以先对入口原文件进行拆分，将拆分的部分代码放到另外一个js文件中。比如，我们把上面代码中的getData函数拆分到<code>/lib/getData.js</code>文件中，然后创建另外一个<code>another.js</code>文件，在这个文件中引入getData函数并且调用。</p><p><img src="'+T+'" alt="image-20230519220252012"></p><blockquote><p>这个时候相当于是把index.js中关于getData函数的创建和调用代码全部删除了。</p></blockquote><p>代码调整完后，可以去配置文件中设置多入口。</p><p><img src="'+L+'" alt="image-20230519220438498"></p><p>设置完成后打包测试。</p><p>在dist目录就可以看到原本是一个文件的内容变成了输出两个文件。</p><p><img src="'+O+'" alt="image-20230519220940431"></p><p>虽然这种拆分包的做法很简单，但是却容易引发一些其他问题，比如相同的包在不同的入口文件中引入，那么在打包的时候，就会被重复打包，从而造成不必要的资源占用。</p><p>比如，我们可以在<code>index.js</code>和<code>another.js</code>两个入口文件中都引入getData模块，</p><p><img src="'+U+`" alt="image-20230519221731934"></p><p>这个时候，在打包之后，index.js中就会再次打包getData模块。</p><h3 id="entry-dependencies" tabindex="-1"><a class="header-anchor" href="#entry-dependencies" aria-hidden="true">#</a> Entry dependencies</h3><p>解决上面的问题，可以在入口文件设置入口文件依赖：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">&quot;shared&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">another</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&quot;./src/another.js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">&quot;shared&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">shared</span><span class="token operator">:</span> <span class="token string">&quot;./src/lib/getData&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样打包出来的文件中，getData模块就会被独立拆分。</p><p><img src="`+R+'" alt="image-20230519222434765"></p><h3 id="splitchunksplugin" tabindex="-1"><a class="header-anchor" href="#splitchunksplugin" aria-hidden="true">#</a> SplitChunksPlugin</h3><p>在上面代码中，需要开发者手动指定要拆分的共享共用模块，而 除了上面这种形式以外，还可以采用<code>SplitChunksPlugin</code>的形式来进行代码拆分。</p><p>首先还是将入口文件设置为之前的多入口文件的设置。</p><p><img src="'+B+`" alt="image-20230519223054884"></p><p>之后，修改优化配置optimization中的内容，添加<code>splitChunks</code>属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">// 省略其他代码</span>
  <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&quot;all&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+V+'" alt="image-20230519223338235"></p><p>编写完成后进行打包，就会发现共用的部分已经被抽离成一个独立的模块。</p><p><img src="'+F+'" alt="image-20230519223453509"></p><p>其中的splitChunks 编写的主要是关于代码分割配置相关的内容。下面是在<code>**splitChunks**</code><strong>中的一些配置信息</strong>。</p><p><code>chunks: &#39;all&#39;</code>表示要对所有的模块进行分割。</p><p><code> minSize: 20000</code>表示分割代码最小的大小，也就是说，如果文件体积小于20k，就不会分割打包。</p><p><code>maxSize: 20000</code> 表示分割代码最大的大小。</p><p><code>minRemainingSize: 0</code>类似于minSize，最后确保提取的文件大小不能为0。</p><p><code>minChunks: 1</code>至少被引用的次数，满足条件才会代码分割。</p><h3 id="动态导入和懒加载" tabindex="-1"><a class="header-anchor" href="#动态导入和懒加载" aria-hidden="true">#</a> 动态导入和懒加载</h3><p>如果想要进行动态代码的拆分，可以使用ES中新增加的<code>import()</code>语法来实现。</p><p>比如下面的代码，我们可以把入口文件中getData()函数导入变为按需导入，这样可以减少入口文件的体积。</p><p><img src="'+N+`" alt="image-20230519232019804"></p><p>设置完成后进行打包，在打包之后的页面中，并不会主动加载getData, 而是点击按钮之后才会加载。</p><p>可以通过设置魔法注释的形式来设置打包出来的文件名。</p><h2 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking" aria-hidden="true">#</a> tree-shaking</h2><p>Tree Shaking 也称为“无用代码消除（Dead Code Elimination）”，是一种 JavaScript 代码优化技术，主要用于减少生产环境下代码的体积和复杂度。Tree Shaking 在JavaScript 模块中移除未使用的部分，使压缩后的文件尽可能小，从而可以更快地加载应用程序。</p><p>在通过webpack进行打包的时候，需要使用<code>esm</code>规范在代码中，这样才能保证tree-shaking生效。</p><p>Webpack5 默认开启了 Production 模式下的 Tree Shaking。在使用webpack5进行代码编写的时候，为了最大化的保证代码tree-shaking的力度以及减少代码体积。</p><p>可以通过在optimization中设置minimize为true来压缩js代码，通过使用terser-webpack-plugin插件来对代码进行压缩和混淆。</p><p>首先，通过下面的命令来下载terser-webpack-plugin插件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> terser-webpack-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成后，首先，在配置文件中进行插件的引入。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;terser-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后在optimization中进行配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">minimize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+I+`" alt="image-20230519233642804"></p><p>运行打包命令就可以看到代码已经被压缩并且混淆了。</p><h2 id="cache" tabindex="-1"><a class="header-anchor" href="#cache" aria-hidden="true">#</a> cache</h2><p>往往在开发过程中，需要不断的进行打包编译，其中在编译过程中会有很多相同的、并未发生改变的文件进行重复打包编译，这个时候就可以开启缓存来进行处理。</p><p>配置项如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 开启缓存</span>
  <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;filesystem&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;my-webpack-cache&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+G+`" alt="image-20230520000706673"></p><p>缓存开启后会在非第一次打包编译的过程中大大提高速度。文件系统缓存使用硬盘进行缓存，能够更好的支持大型项目和长时间的开发周期。通过使用此缓存，Webpack 可以快速读取之前构建的结果，减少不必要的重复构建时间，提高构建速度。</p><h2 id="spa和mpa" tabindex="-1"><a class="header-anchor" href="#spa和mpa" aria-hidden="true">#</a> SPA和MPA</h2><p>SPA 和 MPA 是两种不同的 Web 应用程序架构模式。</p><p>单页面应用程序（SPA）是指所有的内容都只在一个单一的页面中展现，通过异步更新页面的某个部分来模拟多页应用的效果。SPA 架构是基于现代 Web 开发技术如 Ajax、HTML5 和 CSS 的组合，具有更好的用户体验，能够提供更流畅、快速的页面转换和加载，大大减少了页面切换时的等待时间。常见的 SPA 框架有 Vue、React 和 Angular。</p><p>多页面应用程序（MPA）是指每个页面对应一个独立的 HTML 文件，每个页面的内容都是不同的，可以包含不同的 JavaScript、CSS 和其他静态资源。MPA 架构有利于 SEO，能够让每个页面都具有自己独立的 URL，方便搜索引擎对每个页面进行优化。</p><p>SPA 和 MPA 都有各自的优缺点，选择合适的架构取决于具体的应用场景。例如，对于需要提供高度个性的用户体验和互动性的网站或 Web 应用程序，最好选择 SPA 架构，而对于更传统的和 SEO 需求较高的网站，则最好选择 MPA 架构。</p><p>在实际开发中，也可以将两种架构结合使用，即在一个多页面的应用程序中加入 SPA 的特点和技术，以提供更好的用户体验和效率。例如，在一个 MPA 的电商网站中，可以使用 Vue 来实现购物车和订单页等具有交互性和复杂逻辑的页面。</p><h2 id="webpack5中配置spa和mpa" tabindex="-1"><a class="header-anchor" href="#webpack5中配置spa和mpa" aria-hidden="true">#</a> webpack5中配置SPA和MPA</h2><p>Webpack 5 可以通过多种方式来支持单页面应用程序（SPA）和多页面应用程序（MPA）的构建。</p><p>对于 SPA 应用程序，我们可以使用 <code>HtmlWebpackPlugin</code> 插件来生成一个 HTML 文件，并将打包后的 JavaScript 文件自动注入到该文件中。以下是一个简单的示例配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;clean-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">&#39;/dist&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./public/index.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们使用 <code>HtmlWebpackPlugin</code> 生成了一个名为 <code>index.html</code> 的文件，并指定了一个 HTML 模板文件 <code>index.html</code>。插件将会读取该文件并在构建时自动输出到输出目录（dist）中。它还会自动注入我们打包后的 JavaScript 文件 <code>bundle.js</code> 到生成的 HTML 文件中。</p><p>对于 MPA 应用程序，我们需要为每个页面都单独生成一个 HTML 文件，并将每个 HTML 文件都与对应页的 JavaScript 文件链接在一起。Webpack 5 可以通过多个实例的 <code>HtmlWebpackPlugin</code> 插件来实现这一功能。以下是一个简单的示例配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;clean-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">home</span><span class="token operator">:</span> <span class="token string">&#39;./src/home.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">about</span><span class="token operator">:</span> <span class="token string">&#39;./src/about.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">contact</span><span class="token operator">:</span> <span class="token string">&#39;./src/contact.js&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].[chunkhash].js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">&#39;/dist&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./public/home.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;home.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;home&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./public/about.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;about.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;about&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./public/contact.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;contact.html&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;contact&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，我们为每个页面都创建了一个 <code>HtmlWebpackPlugin</code> 实例，并指定了不同的 HTML 模板文件和每个页面对应的 JavaScript 文件名称。插件将在构建时使用这些信息自动为我们生成不同的 HTML 文件。每个 HTML 文件都将自动包含与之对应的 JavaScript 包。</p><p>以上是最基本的配置，详细的配置可以根据具体情况进行进一步调整和优化。</p>`,370),X=[Q];function Y(Z,ss){return n(),a("div",null,X)}const as=s(K,[["render",Y],["__file","webpack.html.vue"]]);export{as as default};
