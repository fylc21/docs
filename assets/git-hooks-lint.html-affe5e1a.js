import{_ as p,r as o,o as i,c as l,a as n,d as s,b as t,e as a}from"./app-82380d9e.js";const c={},r=a('<h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h2><p>一般来说，在前端项目开发的过程中，前端工程师往往需要在提交代码的过程中对代码进行eslint校验，同时对git的提交备注进行规范化处理从而方便后期管理。</p><p>想要实现上述的目标，需要使用到如下的内容:</p><ul><li>Commitizen</li><li>git hooks/husky</li><li>commitlint</li><li>eslint</li><li>lint-staged</li></ul><blockquote><p>操作之前别忘了项目中要进行git init。</p></blockquote><h2 id="commitizen" tabindex="-1"><a class="header-anchor" href="#commitizen" aria-hidden="true">#</a> Commitizen</h2>',6),u={href:"https://commitizen-tools.github.io/commitizen/",target:"_blank",rel:"noopener noreferrer"},d=a(`<p>通过commitizen可以实现提交代码的备注规范的定制。想要在前端项目中使用，需要全局安装commitizen，还需要在项目中独立安装cz-customizable。</p><p>打开终端，执行下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-g</span> commitizen
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> cz-customizable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成后，我们需要在项目中的package.json文件中配置一下commitizen的位置：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json </span>

<span class="token comment">// ... 直接在package.json的最后配置即可 </span>

<span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;commitizen&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node_modules/cz-customizable&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来再来创建一个cz-customizable的配置文件，我们可以把这个配置文件放在项目的根目录下创建的.config目录中，该文件的文件名为.cz-config.js。</p><p>该配置文件的内容如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// .cz-config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 可选类型</span>
  <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;feat&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;feat:     新功能&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;fix&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;fix:      修复&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;docs&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;docs:     文档变更&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;style:    代码格式(不影响代码运行的变动)&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;refactor&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;refactor: 重构(既不是增加feature,也不是修复bug)&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;perf&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;perf:     性能优化&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;test:     增加测试&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;chore&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;chore:    构建过程或辅助工具的变动&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;revert&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;revert:   回退&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;build:    打包&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 消息步骤</span>
  <span class="token literal-property property">messages</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;请选择提交类型:&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">customScope</span><span class="token operator">:</span> <span class="token string">&#39;请输入修改范围(可选):&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">subject</span><span class="token operator">:</span> <span class="token string">&#39;请简要描述提交(必填):&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">&#39;请输入详细描述(可选):&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">footer</span><span class="token operator">:</span> <span class="token string">&#39;请输入要关闭的issue(可选):&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">confirmCommit</span><span class="token operator">:</span> <span class="token string">&#39;确认使用以上信息提交？(y/n/e/h)&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 跳过问题</span>
  <span class="token literal-property property">skipQuestions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;footer&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// subject文字长度默认是72</span>
  <span class="token literal-property property">subjectLimit</span><span class="token operator">:</span> <span class="token number">72</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成后，我们还需要在package.json中，找到刚刚创建的config配置项，在其中添加上下面这段内容，从而指定cz-customizable配置文件所在的位置：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json </span>

<span class="token comment">// .... </span>
<span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;commitizen&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node_modules/cz-customizable&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// config文件地址，如果不设置的话，默认会在项目的根目录去查找配置文件</span>
    <span class="token property">&quot;cz-customizable&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.config/.cz-config.js&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述的commitizen 和 cz-customizable配置完成后，可以提交一下代码进行测试：</p><ul><li><code>git add .</code></li><li><code>git cz</code>(使用cz命令替换commit命令)</li></ul><p>如果配置成功的话，则可以看到如下的界面：</p><p><img src="https://cdn.staticaly.com/gh/fylc21/image_hosting@master/image.5slh07w6y200.webp" alt="image"></p><p><strong>虽然此时我们已经配置好了commitizen等两个插件，并且使用cz命令可以按照提交规则进行提交，但是如果开发者忘了使用cz该怎么办呢？</strong></p><h2 id="git-hooks" tabindex="-1"><a class="header-anchor" href="#git-hooks" aria-hidden="true">#</a> git hooks</h2><p>问题：如果某个开发者忘了使用git cz 命令进行提交，而是使用的git commit 命令进行提交，那么就可能导致他的提交规范并不符合要求。</p><p>如果想要解决这个问题，我们可以使用git hooks。利用git的钩子，在提交的过程中检查git提交备注是否符合规范。</p><blockquote><p>git hooks中的钩子函数，可以在git的不同阶段可以做的额外的操作。</p></blockquote><p>这里用到的钩子:</p><ul><li>pre-commit: 会在提交前被调用，并且可以按需指定是否要拒绝本次提交</li><li>commit-msg： 可以用来规范化标准格式，并且可以按需指定是否要拒绝本次提交。</li></ul><h2 id="使用husky-commitlint检查描述是否符合规范要求" tabindex="-1"><a class="header-anchor" href="#使用husky-commitlint检查描述是否符合规范要求" aria-hidden="true">#</a> 使用husky+commitlint检查描述是否符合规范要求</h2><p>接下来使用git hooks来校验提交信息，需要使用到两个工具：</p><ul><li>commitlint: 校验检查提交信息</li><li>husky: git hook的实现工具</li></ul><p>安装commitlint:</p>`,26),m={href:"https://commitlint.js.org/#/",target:"_blank",rel:"noopener noreferrer"},k=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> @commitlint/cli @commitlint/config-conventional
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装好后，在项目的根目录创建文件：<code>commitlint.config.js</code>,内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>export <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@commitlint/config-conventional&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>之后测试一下commitlint这个校验工具，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;foo: bar&#39;</span> <span class="token operator">|</span>npx commitlint
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果出现下面的提示，表示安装成功：</p><p><img src="https://jsd.cdn.zzko.cn/gh/fylc21/image_hosting@master/image.1jvqg6wsq2g0.webp" alt="image"></p><p>测试通过之后，再来修改配置文件<code>commitlint.config.js</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// eslint-disable-next-line no-undef</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@commitlint/config-conventional&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// type 类型定义，表示 git 提交的 type 必须在以下类型范围内</span>
    <span class="token string-property property">&#39;type-enum&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token string">&#39;always&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>
        <span class="token string">&#39;feat&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 新功能 feature</span>
        <span class="token string">&#39;fix&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 修复 bug</span>
        <span class="token string">&#39;docs&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 文档注释</span>
        <span class="token string">&#39;style&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 代码格式(不影响代码运行的变动)</span>
        <span class="token string">&#39;refactor&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 重构(既不增加新功能，也不是修复bug)</span>
        <span class="token string">&#39;perf&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 性能优化</span>
        <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 增加测试</span>
        <span class="token string">&#39;chore&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 构建过程或辅助工具的变动</span>
        <span class="token string">&#39;revert&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 回退</span>
        <span class="token string">&#39;build&#39;</span> <span class="token comment">// 打包</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// subject 大小写不做校验</span>
    <span class="token string-property property">&#39;subject-case&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;never&#39;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>接下来，再来安装husky:</strong></p>`,10),v={href:"https://www.npmjs.com/package/husky",target:"_blank",rel:"noopener noreferrer"},g=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> husky
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成后手动的进行启动,启动的目的是为了在项目中创建一个.husky文件夹:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx husky <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来打开package.json，在其中添加新的指令：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行指令：npm run prepare。当出现如下的内容，表示指令执行成功：</p><p><img src="https://jsd.cdn.zzko.cn/gh/fylc21/image_hosting@master/image.nb84247k07k.webp" alt="image"></p><p>指令测试成功之后，接下来将commitlint 和 husky配合使用 。</p><p>我们通过husky监听git hooks，在commit-msg这个hooks中执行commitlint，从而实现代码的检测。</p><p>执行命令，实现hooks的添加：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx husky <span class="token function">add</span> .husky/commit-msg <span class="token string">&#39;npx --no-install commitlint --edit &quot;$1&quot;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行完成后，husky下会多出一个hooks：</p><p><img src="https://jsd.cdn.zzko.cn/gh/fylc21/image_hosting@master/image.6k12dzr25540.webp" alt="image"></p><p>到此，关于git的规范化操作处理已经完成， 如果此时开发者进行非规范化提交，则会报错。比如：</p><p><img src="https://jsd.cdn.zzko.cn/gh/fylc21/image_hosting@master/image.7lb8919ude40.webp" alt="image"></p><h2 id="pre-commit检测提交代码" tabindex="-1"><a class="header-anchor" href="#pre-commit检测提交代码" aria-hidden="true">#</a> pre-commit检测提交代码</h2><p>上面已经对代码的提交规范做了强制约束。接下来我们来对代码进行检测。我们要实现的目的是用户在开发完毕之后提交代码的过程中，如果代码不符合eslint格式要求，让终端停止提交，并且展示错误。</p><p>想要实现这个功能，需要配置pre-commit钩子，执行下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">&quot;npx eslint --ext .js,.vue src&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码执行完毕之后 ，会在husky文件夹创建出一个新的钩子文件：</p><p><img src="https://jsd.cdn.zzko.cn/gh/fylc21/image_hosting@master/image.hozagea1s9s.webp" alt="image"></p><p>在这个钩子文件中，我们可以在每次commit之前，执行一遍<code>npx eslint</code>命令。如果eslint校验出现了问题，则程序无法提交。</p><p>比如：</p><p><img src="https://jsd.cdn.zzko.cn/gh/fylc21/image_hosting@master/image.u0utehyzh8w.webp" alt="image"></p><p>接下来再来配置一下代码自动修复功能，想要实现这个功能，需要使用另外一个插件<code>lint-staged</code>。</p><p>这款插件可以让你当前的代码检查<strong>只检查本次修改更新的代码，并且在出错误的时候，自动修复并且推送。</strong></p><p>安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> lint-staged
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改package.json:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;src/**/*.{js,vue}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;eslint --fix&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;git add&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),b=n("code",null,"commit",-1),h=n("code",null,"eslint",-1),y={href:"https://panjiachen.github.io/vue-element-admin-site/zh/guide/advanced/eslint.html",target:"_blank",rel:"noopener noreferrer"},f=a(`<ol><li>如果符合规则：则会提交成功。</li><li>如果不符合规则：它会自动执行 <code>eslint --fix</code> 尝试帮你自动修复，如果修复成功则会帮你把修复好的代码提交，如果失败，则会提示你错误，让你修好这个错误之后才能允许你提交代码。</li></ol><p>最后，在<code>pre-commit</code>钩子中，需要修改一下命令：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token hashbang comment">#!/usr/bin/env sh</span>
<span class="token punctuation">.</span> <span class="token string">&quot;$(dirname -- &quot;</span>$0<span class="token string">&quot;)/_/husky.sh&quot;</span>

# npx eslint <span class="token operator">--</span>ext <span class="token punctuation">.</span>js<span class="token punctuation">,</span><span class="token punctuation">.</span>vue src
npx lint<span class="token operator">-</span>staged

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改完成后，在每次提交代码的时候，就会直接执行修复功能进行修复，修复完成后提交代码。如果修复失败则会直接在终端中抛出错误。</p><p><img src="https://jsd.cdn.zzko.cn/gh/fylc21/image_hosting@master/image.2j2v8wrvh740.webp" alt="image"></p><p><img src="https://jsd.cdn.zzko.cn/gh/fylc21/image_hosting@master/image.4htu3yadzg60.webp" alt="image"></p>`,6);function z(j,_){const e=o("ExternalLinkIcon");return i(),l("div",null,[r,n("blockquote",null,[n("p",null,[n("a",u,[s("点击这里查看官方文档。"),t(e)])])]),d,n("blockquote",null,[n("p",null,[s("官方文档地址："),n("a",m,[s("commitlint - Lint commit messages"),t(e)])])]),k,n("blockquote",null,[n("p",null,[s("地址："),n("a",v,[s("husky - npm (npmjs.com)"),t(e)])])]),g,n("p",null,[s("如上配置，每次它只会在你本地 "),b,s(" 之前，校验你提交的内容是否符合你本地配置的 "),h,s("规则(这个见文档 "),n("a",y,[s("ESLint"),t(e)]),s(" )，校验会出现两种结果：")]),f])}const x=p(c,[["render",z],["__file","git-hooks-lint.html.vue"]]);export{x as default};
